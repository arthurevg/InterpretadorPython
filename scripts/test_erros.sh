#!/bin/bash

# Colors for beautiful output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

# Unicode symbols
CHECK_MARK="‚úÖ"
CROSS_MARK="‚ùå"
WARNING="‚ö†Ô∏è"
BUG="üêõ"
SHIELD="üõ°Ô∏è"
MAGNIFYING_GLASS="üîç"
GEAR="‚öôÔ∏è"
SPARKLES="‚ú®"

# Function to print beautiful headers
print_header() {
    echo ""
    echo -e "${PURPLE}‚ïî$(printf '‚ïê%.0s' {1..70})‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${WHITE}$(printf '%*s' $(((70-${#1})/2)) '')$1$(printf '%*s' $(((70-${#1})/2)) '')${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö$(printf '‚ïê%.0s' {1..70})‚ïù${NC}"
}

# Function to print test results with elegant formatting
print_test_result() {
    local status=$1
    local description="$2"
    local expected="$3"
    local actual="$4"
    local padding=$((45 - ${#description}))
    
    if [ $status -eq 0 ]; then
        echo -e "${GREEN}  ${CHECK_MARK} ${description}$(printf '%*s' $padding '')PASSOU${NC}"
    else
        echo -e "${RED}  ${CROSS_MARK} ${description}$(printf '%*s' $padding '')FALHOU${NC}"
        if [ ! -z "$expected" ] && [ ! -z "$actual" ]; then
            echo -e "${GRAY}     ${MAGNIFYING_GLASS} Esperado: ${expected}${NC}"
            echo -e "${GRAY}     ${MAGNIFYING_GLASS} Obtido:   ${actual}${NC}"
        fi
    fi
}

# Function to print subsection headers
print_subsection() {
    echo -e "\n${BLUE}${BUG} $1${NC}"
    echo -e "${BLUE}$(printf '‚îÄ%.0s' {1..60})${NC}"
}

print_header "${SHIELD} TESTE AUTOMATIZADO DE MENSAGENS DE ERRO ${SHIELD}"

echo -e "${YELLOW}${GEAR} Verificando tratamento de erros e robustez do compilador...${NC}\n"

# Verificar se o interpretador existe
if [ ! -f "./interpretador" ]; then
    echo -e "${RED}${CROSS_MARK} ERRO CR√çTICO: Interpretador n√£o encontrado${NC}"
    echo -e "${YELLOW}   Execute 'make' primeiro para compilar o projeto${NC}"
    exit 1
fi

# Criar diret√≥rio build se n√£o existir
mkdir -p build

# Contadores para estat√≠sticas
total=0
passed=0

# Fun√ß√£o para testar um erro espec√≠fico
test_error() {
    local test_file=$1
    local expected_pattern=$2
    local description=$3
    
    echo -e "\n${CYAN}${MAGNIFYING_GLASS} Testando: ${WHITE}$description${NC}"
    
    # Criar nome √∫nico para o arquivo processado
    local test_name=$(basename "$test_file" .py)
    local processed_file="build/processed_${test_name}.py"
    
    # Processar indenta√ß√£o
    python3 indent_preproc.py "$test_file" > "$processed_file" 2>/dev/null
    local preproc_result=$?
    
    if [ $preproc_result -ne 0 ]; then
        # Erro no pr√©-processamento
        output=$(python3 indent_preproc.py "$test_file" 2>&1)
        if echo "$output" | grep -qi "$expected_pattern"; then
            print_test_result 0 "$description"
            ((passed++))
        else
            print_test_result 1 "$description" "$expected_pattern" "$output"
        fi
    else
        # Executar interpretador com o arquivo processado espec√≠fico
        output=$(timeout 5s ./interpretador "$processed_file" 2>&1)
        if echo "$output" | grep -qi "$expected_pattern"; then
            print_test_result 0 "$description"
            ((passed++))
        else
            print_test_result 1 "$description" "$expected_pattern" "$output"
        fi
    fi
    
    ((total++))
}

# Teste de arquivo n√£o encontrado
print_subsection "Testes de Arquivo e Sistema"
echo -e "${CYAN}${MAGNIFYING_GLASS} Testando: ${WHITE}Arquivo n√£o encontrado${NC}"
output=$(./interpretador arquivo_inexistente_$(date +%s).py 2>&1)
if echo "$output" | grep -qi "n√£o foi poss√≠vel abrir\|cannot open\|no such file"; then
    print_test_result 0 "Arquivo n√£o encontrado"
    ((passed++))
else
    print_test_result 1 "Arquivo n√£o encontrado" "n√£o foi poss√≠vel abrir" "$output"
fi
((total++))

# Executar todos os testes de erro espec√≠ficos
print_subsection "Testes de Erros Sem√¢nticos"

if [ -f "tests/test_erro_variavel_nao_definida.py" ]; then
    test_error "tests/test_erro_variavel_nao_definida.py" "vari√°vel.*n√£o definida\|undefined variable" "Vari√°vel n√£o definida"
else
    echo -e "${YELLOW}${WARNING} Arquivo test_erro_variavel_nao_definida.py n√£o encontrado${NC}"
fi

print_subsection "Testes de Erros Aritm√©ticos"

if [ -f "tests/test_erro_divisao_zero.py" ]; then
    test_error "tests/test_erro_divisao_zero.py" "divis√£o por zero\|division by zero" "Divis√£o por zero"
else
    echo -e "${YELLOW}${WARNING} Arquivo test_erro_divisao_zero.py n√£o encontrado${NC}"
fi

if [ -f "tests/test_erro_modulo_zero.py" ]; then
    test_error "tests/test_erro_modulo_zero.py" "m√≥dulo por zero\|modulo by zero" "M√≥dulo por zero"
else
    echo -e "${YELLOW}${WARNING} Arquivo test_erro_modulo_zero.py n√£o encontrado${NC}"
fi

print_subsection "Testes de Erros de Sintaxe"

if [ -f "tests/test_erro_funcao_nao_definida.py" ]; then
    test_error "tests/test_erro_funcao_nao_definida.py" "fun√ß√£o.*n√£o definida\|undefined function" "Fun√ß√£o n√£o definida"
else
    echo -e "${YELLOW}${WARNING} Arquivo test_erro_funcao_nao_definida.py n√£o encontrado${NC}"
fi

if [ -f "tests/test_erro_sintaxe.py" ]; then
    test_error "tests/test_erro_sintaxe.py" "syntax error\|erro de sintaxe" "Erro de sintaxe"
else
    echo -e "${YELLOW}${WARNING} Arquivo test_erro_sintaxe.py n√£o encontrado${NC}"
fi

if [ -f "tests/test_erro_caractere_invalido.py" ]; then
    test_error "tests/test_erro_caractere_invalido.py" "caractere inv√°lido\|invalid character" "Caractere inv√°lido"
else
    echo -e "${YELLOW}${WARNING} Arquivo test_erro_caractere_invalido.py n√£o encontrado${NC}"
fi

if [ -f "tests/test_erro_indentacao.py" ]; then
    test_error "tests/test_erro_indentacao.py" "indenta√ß√£o inconsistente\|inconsistent indentation" "Indenta√ß√£o inconsistente"
else
    echo -e "${YELLOW}${WARNING} Arquivo test_erro_indentacao.py n√£o encontrado${NC}"
fi

# Resumo final com estat√≠sticas detalhadas
print_header "RELAT√ìRIO FINAL DE TESTES DE ERRO"

echo -e "${WHITE}${SPARKLES} Estat√≠sticas Detalhadas:${NC}"
echo -e "${CYAN}  ‚Ä¢ Total de testes executados: ${WHITE}$total${NC}"
echo -e "${GREEN}  ‚Ä¢ Testes que passaram: ${WHITE}$passed${NC}"
echo -e "${RED}  ‚Ä¢ Testes que falharam: ${WHITE}$((total - passed))${NC}"

if [ $total -gt 0 ]; then
    percentage=$((passed * 100 / total))
    echo -e "${BLUE}  ‚Ä¢ Taxa de sucesso: ${WHITE}${percentage}%${NC}"
fi

echo ""
if [ $passed -eq $total ]; then
    echo -e "${GREEN}‚ïî$(printf '‚ïê%.0s' {1..50})‚ïó${NC}"
    echo -e "${GREEN}‚ïë${WHITE}$(printf '%*s' $((25-9)) '')üéâ TODOS OS TESTES PASSARAM! üéâ$(printf '%*s' $((25-9)) '')${GREEN}‚ïë${NC}"
    echo -e "${GREEN}‚ïö$(printf '‚ïê%.0s' {1..50})‚ïù${NC}"
    echo -e "${CYAN}O sistema de tratamento de erros est√° funcionando corretamente!${NC}"
    exit 0
else
    echo -e "${YELLOW}‚ïî$(printf '‚ïê%.0s' {1..50})‚ïó${NC}"
    echo -e "${YELLOW}‚ïë${WHITE}$(printf '%*s' $((25-11)) '')‚ö†Ô∏è  ALGUNS TESTES FALHARAM ‚ö†Ô∏è$(printf '%*s' $((25-10)) '')${YELLOW}‚ïë${NC}"
    echo -e "${YELLOW}‚ïö$(printf '‚ïê%.0s' {1..50})‚ïù${NC}"
    echo -e "${RED}Verifique os detalhes dos erros acima para melhorar o tratamento.${NC}"
    exit 1
fi