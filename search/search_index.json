{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Interpretador Python - Documenta\u00e7\u00e3o Completa","text":""},{"location":"#visao-geral","title":"\ud83d\udccb Vis\u00e3o Geral","text":"<p> \u2003\u2003Este projeto consiste na implementa\u00e7\u00e3o de um interpretador de Python, desenvolvido como trabalho acad\u00eamico para a disciplina de Compiladores. O objetivo principal \u00e9 aplicar os conceitos estudados ao longo da disciplina, como an\u00e1lise l\u00e9xica, an\u00e1lise sint\u00e1tica e execu\u00e7\u00e3o de comandos, utilizando as ferramentas Flex (para o analisador l\u00e9xico) e Bison (para o analisador sint\u00e1tico).</p>"},{"location":"#integrantes","title":"Integrantes","text":"Ana Beatriz Arthur Evangelista Breno Yuri Carolina Barbosa Jefferson Fran\u00e7a Let\u00edcia Resende"},{"location":"#objetivos","title":"\ud83c\udfaf Objetivos","text":"<ul> <li>Implementar um analisador l\u00e9xico completo usando Flex</li> <li>Desenvolver um analisador sint\u00e1tico robusto usando Bison</li> <li>Criar uma \u00e1rvore sint\u00e1tica abstrata (AST) para representa\u00e7\u00e3o do c\u00f3digo</li> <li>Implementar um interpretador que executa o c\u00f3digo Python</li> <li>Demonstrar tratamento de erros e debugging</li> <li>Fornecer uma suite completa de testes</li> </ul>"},{"location":"#fluxo-do-sistema","title":"\ud83c\udfd7\ufe0f Fluxo do Sistema","text":"Text Only<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   C\u00f3digo Python \u2502\u2500\u2500\u2500\u25b6\u2502  Pr\u00e9-processor  \u2502\u2500\u2500\u2500\u25b6\u2502     Lexer       \u2502\n\u2502   (entrada)     \u2502    \u2502  (indenta\u00e7\u00e3o)   \u2502    \u2502   (Flex)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Interpretador \u2502\u25c0\u2500\u2500\u2500\u2502      AST        \u2502\u25c0\u2500\u2500\u2500\u2502     Parser      \u2502\n\u2502   (execu\u00e7\u00e3o)    \u2502    \u2502  (\u00e1rvore)       \u2502    \u2502   (Bison)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#funcionalidades-implementadas","title":"\ud83d\ude80 Funcionalidades Implementadas","text":""},{"location":"#tipos-de-dados-suportados","title":"\u2705 Tipos de Dados Suportados","text":"<ul> <li>Inteiros: <code>42</code>, <code>-10</code>, <code>+5</code></li> <li>Ponto flutuante: <code>3.14</code>, <code>-2.5</code>, <code>1e-10</code></li> <li>Strings: <code>\"Hello\"</code>, <code>'World'</code></li> <li>Booleanos: <code>True</code>, <code>False</code></li> </ul>"},{"location":"#operadores","title":"\u2705 Operadores","text":"<ul> <li>Aritm\u00e9ticos: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code></li> <li>Compara\u00e7\u00e3o: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>L\u00f3gicos: <code>and</code>, <code>or</code>, <code>not</code></li> </ul>"},{"location":"#estruturas-de-controle","title":"\u2705 Estruturas de Controle","text":"<ul> <li>Condicionais: <code>if</code>/<code>else</code></li> <li>Loops: <code>while</code></li> <li>Controle de fluxo: <code>break</code>, <code>continue</code></li> </ul>"},{"location":"#funcoes-built-in","title":"\u2705 Fun\u00e7\u00f5es Built-in","text":"<ul> <li><code>print()</code>: Exibe valores no console</li> </ul>"},{"location":"#recursos-avancados","title":"\u2705 Recursos Avan\u00e7ados","text":"<ul> <li>Indenta\u00e7\u00e3o: Suporte completo \u00e0 indenta\u00e7\u00e3o Python</li> <li>Coment\u00e1rios: Linhas come\u00e7ando com <code>#</code></li> <li>Tratamento de erros: Mensagens detalhadas de erro</li> <li>Debugging: Suporte a GDB para debugging</li> </ul>"},{"location":"#estrutura-do-projeto","title":"\ud83d\udcc1 Estrutura do Projeto","text":"Text Only<pre><code>Trab_Compiladores/\n\u251c\u2500\u2500 \ud83d\udcc4 main.c                    # Ponto de entrada do programa\n\u251c\u2500\u2500 \ud83d\udcc4 Makefile                  # Script de compila\u00e7\u00e3o\n\u251c\u2500\u2500 \ud83d\udcc4 indent_preproc.py         # Pr\u00e9-processador de indenta\u00e7\u00e3o\n\u251c\u2500\u2500 \ud83d\udcc4 teste.py                  # Arquivo de teste principal\n\u251c\u2500\u2500 \ud83d\udcc4 README.md                 # Documenta\u00e7\u00e3o b\u00e1sica\n\u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml               # Configura\u00e7\u00e3o do MkDocs\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 lexer/\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 lexer.l              # Especifica\u00e7\u00e3o do analisador l\u00e9xico (Flex)\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 parser/\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 parser.y             # Gram\u00e1tica do analisador sint\u00e1tico (Bison)\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 ast.h                # Defini\u00e7\u00f5es da AST\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 ast.c                # Implementa\u00e7\u00e3o da AST\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 types.h              # Defini\u00e7\u00f5es de tipos\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 tabela.h             # Interface da tabela de s\u00edmbolos\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 tabela.c             # Implementa\u00e7\u00e3o da tabela de s\u00edmbolos\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 interpretador.h      # Interface do interpretador\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 interpretador.c      # Implementa\u00e7\u00e3o do interpretador\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 tests/                   # Suite de testes\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 test_*.py            # Testes automatizados\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 test_*.c             # Testes manuais\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 test*.txt            # Arquivos de teste\n\u2502\n\u251c\u2500\u2500 \ud83d\udcc2 scripts/                 # Scripts de automa\u00e7\u00e3o\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 run_tests.sh         # Execu\u00e7\u00e3o de todos os testes\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 test_erros.sh        # Testes de tratamento de erros\n\u2502   \u251c\u2500\u2500 \ud83d\udcc4 test_resultados.sh   # Testes de resultados\n\u2502   \u2514\u2500\u2500 \ud83d\udcc4 quick_test.sh        # Teste r\u00e1pido\n\u2502\n\u2514\u2500\u2500 \ud83d\udcc2 docs/                    # Documenta\u00e7\u00e3o completa\n    \u251c\u2500\u2500 \ud83d\udcc4 index.md             # Esta p\u00e1gina\n    \u251c\u2500\u2500 \ud83d\udcc4 instalacao.md        # Guia de instala\u00e7\u00e3o\n    \u251c\u2500\u2500 \ud83d\udcc4 uso.md               # Guia de uso\n    \u251c\u2500\u2500 \ud83d\udcc4 testes.md            # Documenta\u00e7\u00e3o dos testes\n    \u2514\u2500\u2500\ud83d\udcc4 ...                   # Outros arquivos de documenta\u00e7\u00e3o\n</code></pre>"},{"location":"#tecnologias-utilizadas","title":"\ud83d\udee0\ufe0f Tecnologias Utilizadas","text":"<ul> <li>Flex: Gerador de analisadores l\u00e9xicos</li> <li>Bison: Gerador de analisadores sint\u00e1ticos</li> <li>GCC: Compilador C</li> <li>Make: Sistema de build</li> <li>Python 3: Pr\u00e9-processamento e scripts de teste</li> <li>MkDocs: Gera\u00e7\u00e3o de documenta\u00e7\u00e3o</li> </ul>"},{"location":"#proximos-passos","title":"\ud83d\udcd6 Pr\u00f3ximos Passos","text":"<ol> <li>Instala\u00e7\u00e3o: Configure o ambiente de desenvolvimento</li> <li>Uso B\u00e1sico: Aprenda a compilar e executar o interpretador</li> <li>Testes: Execute e entenda a suite de testes</li> <li>Desenvolvimento: Contribua para o projeto</li> </ol>"},{"location":"#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/04/2025 Cria\u00e7\u00e3o do GitPages do grupo Jefferson <code>1.1</code> 27/04/2025 Cria\u00e7\u00e3o da Home do grupo Jefferson <code>1.2</code> 28/04/2025 Atualiza\u00e7\u00e3o da Home no GitPages Arthur Evangelista <code>1.3</code> 27/06/2025 Adi\u00e7\u00e3o do fluxo do sistema e funcionalidades implementadas Arthur Evangelista <code>1.4</code> 04/07/2025 Configura\u00e7\u00e3o do reposit\u00f3rio remoto e corre\u00e7\u00e3o do GitPages Arthur Evangelista <p>Esta documenta\u00e7\u00e3o foi criada para o trabalho de Compiladores, demonstrando a implementa\u00e7\u00e3o completa de um interpretador Python usando as ferramentas Flex e Bison.</p>"},{"location":"cronograma/","title":"Cronograma do Projeto","text":""},{"location":"cronograma/#cronograma-planejado-das-sprints","title":"Cronograma planejado das sprints","text":"Sprint Per\u00edodo Objetivos Principais Entregas Principais Tarefas Principais Sprint 1 24/03 a 09/04 Formar equipe, configurar ambiente, definir linguagem e criar gram\u00e1tica inicial Documento da linguagem, prot\u00f3tipo da gram\u00e1tica, ambiente testado Definir escopo, configurar reposit\u00f3rio, instalar ferramentas, criar gram\u00e1tica inicial (.y) e regras l\u00e9xicas (.l) Sprint 2 10/04 a 30/04 Finalizar an\u00e1lise l\u00e9xica, implementar regras b\u00e1sicas do parser, preparar apresenta\u00e7\u00e3o P1 Arquivo .l completo, regras sint\u00e1ticas iniciais, formul\u00e1rio e apresenta\u00e7\u00e3o P1 Finalizar express\u00f5es regulares, desenvolver regras sint\u00e1ticas b\u00e1sicas, testar tokens/parser, preparar apresenta\u00e7\u00e3o Sprint 3 01/05 a 14/05 Implementar AST, iniciar an\u00e1lise sem\u00e2ntica b\u00e1sica, melhorar mensagens de erro Estruturas da AST, m\u00f3dulo de an\u00e1lise sem\u00e2ntica inicial, parser construindo AST Implementar a\u00e7\u00f5es sem\u00e2nticas para AST, criar tabela de s\u00edmbolos, tratar erros sint\u00e1ticos/sem\u00e2nticos, testar AST Sprint 4 15/05 a 04/06 Implementar interpreta\u00e7\u00e3o da AST, aprimorar an\u00e1lise sem\u00e2ntica, preparar apresenta\u00e7\u00e3o P2 Interpretador funcional, an\u00e1lise sem\u00e2ntica robusta, formul\u00e1rio e apresenta\u00e7\u00e3o P2 Criar l\u00f3gica de interpreta\u00e7\u00e3o recursiva, consolidar estruturas de controle, testar interpretador, preparar apresenta\u00e7\u00e3o Sprint 5 05/06 a 25/06 Corrigir erros e d\u00e9bitos t\u00e9cnicos, garantir estabilidade e qualidade para entrega final Vers\u00e3o revisada e est\u00e1vel, bugs corrigidos, d\u00e9bitos t\u00e9cnicos resolvidos, projeto pronto para entrega Revisar/corrigir bugs, refatorar c\u00f3digo, atualizar documenta\u00e7\u00e3o, garantir cobertura de testes, testes finais de integra\u00e7\u00e3o Sprint 6 26/06 a 09/07 Entrevistas finais, corrigir pend\u00eancias, finalizar documenta\u00e7\u00e3o e encerrar o projeto Entrevistas finais, documenta\u00e7\u00e3o completa, ajustes finais Preparar-se para entrevistas, corrigir falhas apontadas, finalizar documenta\u00e7\u00e3o e exemplos de uso"},{"location":"cronograma/#debitos-tecnicos-e-pendencias","title":"D\u00e9bitos T\u00e9cnicos e Pend\u00eancias","text":"Descri\u00e7\u00e3o do D\u00e9bito T\u00e9cnico ou Pend\u00eancia Sprint em que surgiu Status (Aberto/Resolvido) Melhorar mensagens de erro Sprint 3 Resolvido Adicionar testes para o analisador sint\u00e1tico Sprint 3 Resolvido Adicionar testes para AST Sprint 3 Resolvido Interpretar interpreta\u00e7\u00e3o da AST Sprint 4 Resolvido Corrigir erros e d\u00e9bitos t\u00e9cnicos, garantir estabilidade e qualidade para entrega final Sprint 5 Resolvido"},{"location":"cronograma/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/04/2025 Documenta\u00e7\u00e3o de cronograma Breno Yuri <code>1.1</code> 28/04/2025 Corre\u00e7\u00f5es Breno Yuri <code>1.2</code> 26/05/2025 Organiza\u00e7\u00e3o do cronograma em formato de tabela e adi\u00e7\u00e3o da tabela de d\u00e9bitos t\u00e9cnicos. Arthur Evangelista <code>1.3</code> 26/05/2025 D\u00e9bito t\u00e9cnico \"adicionar testes para AST\" resolvido. Arthur Evangelista <code>1.4</code> 20/06/2025 D\u00e9bito t\u00e9cnico \"melhorar mensagens de erro\" resolvido. Ana Beatriz <code>1.5</code> 25/06/2025 D\u00e9bito t\u00e9cnico \"Interpreta\u00e7\u00e3o da AST\" resolvido e \"Adicionar testes para o analisador sint\u00e1tico\" resolvido Let\u00edcia Resende <code>1.6</code> 25/06/2025 D\u00e9bito t\u00e9cnico \"Corrigir erros e d\u00e9bitos t\u00e9cnicos, garantir estabilidade e qualidade para entrega final\" Resolvido Let\u00edcia Resende"},{"location":"desenvolvimento/","title":"\ud83d\udc68\u200d\ud83d\udcbb Guia para Desenvolvedores","text":"<p>Este guia \u00e9 destinado a desenvolvedores que querem contribuir para o projeto do interpretador Python, adicionar novas funcionalidades ou corrigir bugs.</p>"},{"location":"desenvolvimento/#como-contribuir","title":"\ud83c\udfaf Como Contribuir","text":""},{"location":"desenvolvimento/#1-preparacao-do-ambiente","title":"1. Prepara\u00e7\u00e3o do Ambiente","text":"<p>Antes de come\u00e7ar a desenvolver, certifique-se de que o ambiente est\u00e1 configurado:</p> Bash<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/Frans6/Trab_Compiladores.git\ncd Trab_Compiladores\n\n# Instalar depend\u00eancias (se necess\u00e1rio)\nsudo apt install build-essential flex bison python3 make\n\n# Compilar o projeto\nmake clean &amp;&amp; make\n\n# Executar testes para verificar se tudo est\u00e1 funcionando\nmake test-complete\n</code></pre>"},{"location":"desenvolvimento/#2-estrutura-do-codigo","title":"2. Estrutura do C\u00f3digo","text":""},{"location":"desenvolvimento/#convencoes-de-codigo","title":"Conven\u00e7\u00f5es de C\u00f3digo","text":"<p>C (Parser/Interpreter): C<pre><code>// Nomes de fun\u00e7\u00f5es: snake_case\nvoid interpretar_expressao(NoAst *no) {\n    // Coment\u00e1rios explicativos para l\u00f3gica complexa\n    if (!no) return;\n\n    // Espa\u00e7amento consistente\n    switch (no-&gt;tipo) {\n        case NODO_OPERACAO:\n            interpretar_operacao(no);\n            break;\n        case NODO_VALOR:\n            interpretar_valor(no);\n            break;\n        default:\n            fprintf(stderr, \"Tipo de n\u00f3 n\u00e3o suportado\\n\");\n    }\n}\n\n// Estruturas: PascalCase\ntypedef struct {\n    char *nome;\n    Resultado valor;\n} Simbolo;\n</code></pre></p> <p>Flex (Lexer): C<pre><code>// tokens sempre em MAI\u00daSCULAS\n\"if\"         { return IF; }\n\"while\"      { return WHILE; }\n\n// Padr\u00f5es com nomes descritivos\nDIGIT       [0-9]\nID          [a-zA-Z_][a-zA-Z0-9_]*\n</code></pre></p> <p>Bison (Parser): Text Only<pre><code>// Regras gramaticais com coment\u00e1rios\nexpressao: \n    termo \n        { $$ = $1; }\n    | expressao ADD termo \n        { $$ = criar_no_operacao(ADICAO, $1, $3, @1.first_line); }\n    ;\n</code></pre></p>"},{"location":"desenvolvimento/#3-fluxo-de-desenvolvimento","title":"3. Fluxo de Desenvolvimento","text":""},{"location":"desenvolvimento/#adicionando-nova-funcionalidade","title":"Adicionando Nova Funcionalidade","text":"<ol> <li>Identificar onde adicionar:</li> <li>Lexer: Novos tokens em <code>lexer/lexer.l</code></li> <li>Parser: Novas regras gramaticais em <code>parser/parser.y</code></li> <li>AST: Novos tipos de n\u00f3s em <code>parser/ast.h</code></li> <li> <p>Interpreter: Nova l\u00f3gica em <code>parser/interpretador.c</code></p> </li> <li> <p>Exemplo: Adicionar operador <code>//</code> (divis\u00e3o inteira):</p> </li> </ol> C<pre><code>// 1. Adicionar token no lexer (lexer/lexer.l)\n\"//\" { return IDIV; }  // Divis\u00e3o inteira\n\n// 2. Declarar token no parser (parser/parser.y)\n%token IDIV\n\n// 3. Adicionar \u00e0 gram\u00e1tica\ntermo: \n    fator \n        { $$ = $1; }\n    | termo IDIV fator \n        { $$ = criar_no_operacao(DIVISAO_INTEIRA, $1, $3, @1.first_line); }\n    ;\n\n// 4. Adicionar tipo de operador (parser/types.h)\ntypedef enum {\n    ADICAO, SUBTRACAO, MULTIPLICACAO, DIVISAO, DIVISAO_INTEIRA, MODULO, POTENCIA,\n    // ... outros operadores\n} TipoOperador;\n\n// 5. Implementar no interpretador (parser/interpretador.c)\ncase DIVISAO_INTEIRA:\n    if (dir_valor.valor.int_val == 0) {\n        fprintf(stderr, \"[ERRO]: Divis\u00e3o por zero\\n\");\n        return resultado_erro();\n    }\n    resultado.tipo = TIPO_INT;\n    resultado.valor.int_val = esq_valor.valor.int_val / dir_valor.valor.int_val;\n    break;\n</code></pre>"},{"location":"desenvolvimento/#corrigindo-bugs","title":"Corrigindo Bugs","text":"<ol> <li> <p>Identificar o problema: Bash<pre><code># Executar com GDB para debugging\nmake clean &amp;&amp; make\ngdb --args ./interpretador arquivo_com_bug.py\n(gdb) run\n(gdb) bt  # Se houver crash\n</code></pre></p> </li> <li> <p>Adicionar testes: Python<pre><code># tests/test_divisao_inteira.py\nx = 10\ny = 3\nresultado = x / y\nprint(\"Divis\u00e3o inteira:\", resultado)  # Deve imprimir 3\n</code></pre></p> </li> <li> <p>Corrigir e testar: Bash<pre><code>make test-divisao-inteira\n</code></pre></p> </li> </ol>"},{"location":"desenvolvimento/#4-testes","title":"4. Testes","text":""},{"location":"desenvolvimento/#executando-testes-durante-desenvolvimento","title":"Executando Testes Durante Desenvolvimento","text":"Bash<pre><code># Teste espec\u00edfico durante desenvolvimento\nmake test-expressoes\n\n# Todos os testes relacionados\nmake test-parser-suite\n\n# Testes de erro\nmake test-erros\n\n# Suite completa (antes do commit)\nmake test-complete\n</code></pre>"},{"location":"desenvolvimento/#adicionando-novos-testes","title":"Adicionando Novos Testes","text":"<p>Teste de Funcionalidade: Python<pre><code># tests/test_nova_funcionalidade.py\n# Testa a nova funcionalidade implementada\nx = 10\ny = 5\nresultado = x // y  # Nova opera\u00e7\u00e3o\nprint(\"Resultado:\", resultado)\n\n# Testa casos extremos\nprint(\"Divis\u00e3o por 1:\", x // 1)\nprint(\"Divis\u00e3o por si mesmo:\", x // x)\n</code></pre></p> <p>Teste Unit\u00e1rio: C<pre><code>// tests/test_nova_funcionalidade.c\n#include &lt;assert.h&gt;\n#include \"../parser/ast.h\"\n\nvoid test_nova_operacao() {\n    NoAst *esq = criar_no_valor_int(10, 1);\n    NoAst *dir = criar_no_valor_int(3, 1);\n    NoAst *op = criar_no_operacao(DIVISAO_INTEIRA, esq, dir, 1);\n\n    assert(op-&gt;tipo == NODO_OPERACAO);\n    assert(op-&gt;dados.operacao.operador == DIVISAO_INTEIRA);\n\n    destruir_ast(op);\n}\n\nint main() {\n    test_nova_operacao();\n    printf(\"\u2705 Testes da nova funcionalidade passaram\\n\");\n    return 0;\n}\n</code></pre></p>"},{"location":"desenvolvimento/#5-debugging","title":"5. Debugging","text":""},{"location":"desenvolvimento/#usando-gdb","title":"Usando GDB","text":"Bash<pre><code># Compilar com debug\nmake clean &amp;&amp; make CFLAGS=\"-g -O0\"\n\n# Executar com GDB\ngdb --args ./interpretador arquivo.py\n\n# Comandos \u00fateis\n(gdb) break interpretador.c:150  # Breakpoint na linha 150\n(gdb) run\n(gdb) next                       # Pr\u00f3xima linha\n(gdb) step                       # Entrar na fun\u00e7\u00e3o\n(gdb) print variavel             # Imprimir vari\u00e1vel\n(gdb) info locals               # Ver vari\u00e1veis locais\n(gdb) bt                        # Backtrace\n</code></pre>"},{"location":"desenvolvimento/#logs-e-debug","title":"Logs e Debug","text":"C<pre><code>// Adicionar logs de debug\n#ifdef DEBUG\n    printf(\"DEBUG: Interpretando opera\u00e7\u00e3o %d\\n\", no-&gt;dados.operacao.operador);\n#endif\n\n// Ou usar fprintf para stderr\nfprintf(stderr, \"DEBUG: Valor da vari\u00e1vel %s = %d\\n\", nome, valor);\n</code></pre>"},{"location":"desenvolvimento/#6-otimizacoes","title":"6. Otimiza\u00e7\u00f5es","text":""},{"location":"desenvolvimento/#performance","title":"Performance","text":"C<pre><code>// Usar realloc eficientemente\nif (tabela-&gt;tamanho &gt;= tabela-&gt;capacidade) {\n    tabela-&gt;capacidade *= 2;\n    tabela-&gt;simbolos = realloc(tabela-&gt;simbolos, \n                              tabela-&gt;capacidade * sizeof(Simbolo));\n}\n\n// Evitar aloca\u00e7\u00f5es desnecess\u00e1rias\nstatic char buffer[1024];  // Buffer est\u00e1tico para strings pequenas\n</code></pre>"},{"location":"desenvolvimento/#memoria","title":"Mem\u00f3ria","text":"C<pre><code>// Sempre liberar mem\u00f3ria\nvoid destruir_ast(NoAst *no) {\n    if (!no) return;\n\n    switch (no-&gt;tipo) {\n        case NODO_OPERACAO:\n            destruir_ast(no-&gt;dados.operacao.esquerda);\n            destruir_ast(no-&gt;dados.operacao.direita);\n            break;\n        case NODO_ATRIBUICAO:\n            free(no-&gt;dados.atribuicao.nome);\n            destruir_ast(no-&gt;dados.atribuicao.valor);\n            break;\n        // ... outros casos\n    }\n\n    free(no);\n}\n</code></pre>"},{"location":"desenvolvimento/#7-documentacao","title":"7. Documenta\u00e7\u00e3o","text":""},{"location":"desenvolvimento/#comentarios-no-codigo","title":"Coment\u00e1rios no C\u00f3digo","text":"C<pre><code>/**\n * Interpreta uma opera\u00e7\u00e3o bin\u00e1ria\n * @param no N\u00f3 da AST contendo a opera\u00e7\u00e3o\n * @return Resultado da opera\u00e7\u00e3o\n */\nResultado interpretar_operacao(NoAst *no) {\n    // Valida\u00e7\u00e3o de entrada\n    if (!no || no-&gt;tipo != NODO_OPERACAO) {\n        return resultado_erro();\n    }\n\n    // Avalia operandos\n    Resultado esq = interpretar(no-&gt;dados.operacao.esquerda);\n    Resultado dir = interpretar(no-&gt;dados.operacao.direita);\n\n    // Executa opera\u00e7\u00e3o baseada no tipo\n    return executar_operacao(no-&gt;dados.operacao.operador, esq, dir);\n}\n</code></pre>"},{"location":"desenvolvimento/#atualizar-documentacao","title":"Atualizar Documenta\u00e7\u00e3o","text":"<p>Quando adicionar novas funcionalidades, atualize:</p> <ol> <li>README.md: Lista de funcionalidades</li> <li>docs/arquitetura.md: Documenta\u00e7\u00e3o da arquitetura</li> <li>docs/uso.md: Exemplos de uso</li> <li>docs/testes.md: Documenta\u00e7\u00e3o dos testes</li> </ol>"},{"location":"desenvolvimento/#8-commits-e-versionamento","title":"8. Commits e Versionamento","text":""},{"location":"desenvolvimento/#convencoes-de-commit","title":"Conven\u00e7\u00f5es de Commit","text":"Bash<pre><code># Estrutura: tipo(escopo): descri\u00e7\u00e3o\nfeat(lexer): adiciona suporte ao operador //\nfix(parser): corrige preced\u00eancia de operadores\ndocs(readme): atualiza lista de funcionalidades\ntest(expressoes): adiciona testes para divis\u00e3o inteira\nrefactor(ast): simplifica cria\u00e7\u00e3o de n\u00f3s\n</code></pre>"},{"location":"desenvolvimento/#exemplos-de-commits","title":"Exemplos de Commits","text":"Bash<pre><code>git add .\ngit commit -m \"feat(operators): adiciona operador de divis\u00e3o inteira //\n\n- Adiciona token IDIV no lexer\n- Implementa regra gramatical para divis\u00e3o inteira\n- Adiciona suporte no interpretador\n- Inclui testes unit\u00e1rios e de funcionalidade\n- Atualiza documenta\u00e7\u00e3o\"\n</code></pre>"},{"location":"desenvolvimento/#9-checklist-antes-do-commit","title":"9. Checklist Antes do Commit","text":"<ul> <li>[ ] C\u00f3digo compila sem warnings</li> <li>[ ] Todos os testes passam (<code>make test-complete</code>)</li> <li>[ ] Novos testes foram adicionados</li> <li>[ ] Documenta\u00e7\u00e3o foi atualizada</li> <li>[ ] C\u00f3digo segue as conven\u00e7\u00f5es do projeto</li> <li>[ ] Mem\u00f3ria \u00e9 liberada corretamente</li> <li>[ ] Tratamento de erros foi implementado</li> </ul>"},{"location":"desenvolvimento/#referencias","title":"Refer\u00eancias","text":"<ul> <li>Flex Manual</li> <li>Bison Manual</li> <li>GCC Documentation</li> <li>Python Language Reference</li> </ul>"},{"location":"desenvolvimento/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<p>Para come\u00e7ar a contribuir:</p> <ol> <li>Configure o ambiente se ainda n\u00e3o fez</li> <li>Execute os testes para entender o que j\u00e1 funciona</li> <li>Estude a arquitetura para entender o c\u00f3digo</li> <li>Escolha uma funcionalidade da lista de sugest\u00f5es</li> <li>Implemente e teste seguindo este guia</li> </ol> <p>Contribui\u00e7\u00f5es s\u00e3o bem-vindas! Este projeto \u00e9 uma excelente oportunidade para aprender sobre compiladores e interpretadores.</p>"},{"location":"desenvolvimento/#processo-de-desenvolvimento","title":"Processo de Desenvolvimento","text":"<p>Esta se\u00e7\u00e3o documenta o processo de desenvolvimento do interpretador Python, incluindo as dificuldades encontradas, solu\u00e7\u00f5es implementadas e li\u00e7\u00f5es aprendidas.</p>"},{"location":"desenvolvimento/#desafios-encontrados","title":"Desafios Encontrados","text":""},{"location":"desenvolvimento/#1-tratamento-da-indentacao-python","title":"1. Tratamento da Indenta\u00e7\u00e3o Python","text":"<p>Problema: Python usa indenta\u00e7\u00e3o para definir blocos de c\u00f3digo, mas Flex/Bison trabalham com tokens tradicionais como chaves <code>{}</code>.</p> <p>Dificuldades: - Como converter espa\u00e7os/tabs em tokens que o parser possa entender? - Como detectar erros de indenta\u00e7\u00e3o inconsistente? - Como manter a estrutura hier\u00e1rquica dos blocos?</p> <p>Solu\u00e7\u00e3o Implementada: O grupo perdeu muito tempo tentando processar a indenta\u00e7\u00e3o, ap\u00f3s muita pesquisa n\u00f3s: - Criamos um pr\u00e9-processador Python (<code>indent_preproc.py</code>) que:   - Converte indenta\u00e7\u00e3o em tokens <code>@INDENT@</code> e <code>@DEDENT@</code>   - Remove coment\u00e1rios e normaliza quebras de linha   - Detecta e reporta erros de indenta\u00e7\u00e3o inconsistente</p> <p>C\u00f3digo da solu\u00e7\u00e3o: Python<pre><code>def process_file(filepath):\n    indent_stack = [0]\n\n    for line in lines:\n        leading_spaces = len(line) - len(line.lstrip())\n\n        if leading_spaces &gt; indent_stack[-1]:\n            indent_stack.append(leading_spaces)\n            print('@INDENT@')\n\n        while leading_spaces &lt; indent_stack[-1]:\n            indent_stack.pop()\n            print('@DEDENT@')\n</code></pre></p>"},{"location":"desenvolvimento/#2-gerenciamento-de-memoria","title":"2. Gerenciamento de Mem\u00f3ria","text":"<p>Problema: C \u00e9 uma linguagem sem garbage collection, exigindo gerenciamento manual de mem\u00f3ria.</p> <p>Dificuldades: - Como evitar memory leaks na AST? - Como gerenciar strings din\u00e2micas? - Como liberar estruturas complexas recursivamente?</p> <p>Solu\u00e7\u00f5es Implementadas: - Fun\u00e7\u00e3o <code>destruir_ast()</code> que percorre recursivamente a \u00e1rvore - Uso de <code>strdup()</code> para strings e <code>free()</code> correspondente - Estruturas de dados com fun\u00e7\u00f5es de cria\u00e7\u00e3o/destrui\u00e7\u00e3o</p> <p>Exemplo de solu\u00e7\u00e3o: C<pre><code>void destruir_ast(NoAst *no) {\n    if (!no) return;\n\n    switch (no-&gt;tipo) {\n        case NODO_OPERACAO:\n            destruir_ast(no-&gt;dados.operacao.esquerda);\n            destruir_ast(no-&gt;dados.operacao.direita);\n            break;\n        case NODO_ATRIBUICAO:\n            free(no-&gt;dados.atribuicao.nome);\n            destruir_ast(no-&gt;dados.atribuicao.valor);\n            break;\n    }\n\n    free(no);\n}\n</code></pre></p>"},{"location":"desenvolvimento/#3-precedencia-de-operadores","title":"3. Preced\u00eancia de Operadores","text":"<p>Problema: Como implementar a preced\u00eancia correta de operadores em Bison?</p> <p>Dificuldades: - Operadores com diferentes n\u00edveis de preced\u00eancia - Operadores un\u00e1rios vs bin\u00e1rios - Associatividade (esquerda vs direita)</p> <p>Solu\u00e7\u00e3o Implementada: - Uso das diretivas de preced\u00eancia do Bison: Text Only<pre><code>%left  OR AND\n%nonassoc EQ NEQ GT LT GTE LTE\n%left  ADD SUB\n%left  MUL DIV MOD\n%right NOT POW UMINUS\n%precedence ELSE\n</code></pre></p>"},{"location":"desenvolvimento/#4-tratamento-de-erros","title":"4. Tratamento de Erros","text":"<p>Problema: Como fornecer mensagens de erro \u00fateis e espec\u00edficas?</p> <p>Dificuldades: - Erros em diferentes fases (l\u00e9xica, sint\u00e1tica, sem\u00e2ntica) - Como reportar a linha exata do erro? - Como distinguir diferentes tipos de erro?</p> <p>Solu\u00e7\u00f5es Implementadas: - Uso de <code>yylineno</code> para rastrear linha atual - Mensagens espec\u00edficas para cada tipo de erro - Tratamento de erros em diferentes n\u00edveis</p> <p>Exemplos: C<pre><code>// Erro l\u00e9xico\nfprintf(stderr, \"[ERRO] (linha %d): Caractere inv\u00e1lido '%s'\\n\", yylineno, yytext);\n\n// Erro sem\u00e2ntico\nfprintf(stderr, \"[ERRO]: Vari\u00e1vel '%s' n\u00e3o definida\\n\", nome);\n\n// Erro de execu\u00e7\u00e3o\nfprintf(stderr, \"[ERRO]: Divis\u00e3o por zero\\n\");\n</code></pre></p>"},{"location":"desenvolvimento/#decisoes-de-design","title":"Decis\u00f5es de Design","text":""},{"location":"desenvolvimento/#1-estrutura-da-ast","title":"1. Estrutura da AST","text":"<p>Decis\u00e3o: Usar union em C para diferentes tipos de n\u00f3s Justificativa: Permite representar diferentes tipos de instru\u00e7\u00f5es em uma \u00fanica estrutura</p> C<pre><code>typedef struct NoAst {\n    TipoNo tipo;\n    int linha;\n    union {\n        struct { TipoOperador operador; NoAst *esquerda; NoAst *direita; } operacao;\n        struct { TipoDado tipo; union { int int_val; double float_val; char *string_val; bool bool_val; } valor; } literal;\n        char *identificador;\n        struct { char *nome; NoAst *valor; } atribuicao;\n    } dados;\n} NoAst;\n</code></pre>"},{"location":"desenvolvimento/#2-tabela-de-simbolos","title":"2. Tabela de S\u00edmbolos","text":"<p>Decis\u00e3o: A princ\u00edpio, a tabela de s\u00edmbolos foi criada como uma lista encadeada, devido a sua simplicidade na hora de fazer. No entanto, ap\u00f3s a aula de tabela de s\u00edmbolos, vimos que a melhor op\u00e7\u00e3o seria a Tabela Hash. Justificativa: Performance Alternativas consideradas: Lista encadeada(mais simples)</p>"},{"location":"desenvolvimento/#3-sistema-de-tipos","title":"3. Sistema de Tipos","text":"<p>Decis\u00e3o: Tipos din\u00e2micos com union Justificativa: Flexibilidade para opera\u00e7\u00f5es entre tipos diferentes Alternativas consideradas: Tipos est\u00e1ticos, sistema de tipos mais rigoroso</p> C<pre><code>typedef struct {\n    TipoDado tipo;\n    union { \n        int int_val; \n        double float_val; \n        char* string_val; \n        bool bool_val; \n    } valor;\n} Resultado;\n</code></pre>"},{"location":"desenvolvimento/#licoes-aprendidas","title":"Li\u00e7\u00f5es Aprendidas","text":""},{"location":"desenvolvimento/#1-planejamento","title":"1. Planejamento","text":"<p>Li\u00e7\u00e3o: O planejamento bem definido desde o in\u00edcio facilita muito o desenvolvimento Aplica\u00e7\u00e3o: Seguindo o 'guia de um interpretador' do professor, conseguimos nos planejar para cada etapa do desenvolvimento.</p>"},{"location":"desenvolvimento/#2-testes-incrementais","title":"2. Testes Incrementais","text":"<p>Li\u00e7\u00e3o: Testar cada componente individualmente antes da integra\u00e7\u00e3o Aplica\u00e7\u00e3o: Criamos testes unit\u00e1rios para AST, tabela de s\u00edmbolos, etc.</p>"},{"location":"desenvolvimento/#3-documentacao-durante-o-desenvolvimento","title":"3. Documenta\u00e7\u00e3o Durante o Desenvolvimento","text":"<p>Li\u00e7\u00e3o: Documentar decis\u00f5es e problemas enquanto ainda est\u00e3o frescos Aplica\u00e7\u00e3o: Coment\u00e1rios no c\u00f3digo e documenta\u00e7\u00e3o t\u00e9cnica(falhamos aqui em alguns momentos)</p>"},{"location":"desenvolvimento/#4-gerenciamento-de-memoria","title":"4. Gerenciamento de Mem\u00f3ria","text":"<p>Li\u00e7\u00e3o: Em C, sempre pensar sobre aloca\u00e7\u00e3o e libera\u00e7\u00e3o de mem\u00f3ria Aplica\u00e7\u00e3o: Fun\u00e7\u00f5es de cria\u00e7\u00e3o e destrui\u00e7\u00e3o para cada estrutura</p>"},{"location":"desenvolvimento/#5-tratamento-de-erros","title":"5. Tratamento de Erros","text":"<p>Li\u00e7\u00e3o: Mensagens de erro claras s\u00e3o essenciais para debugging Aplica\u00e7\u00e3o: Sistema de mensagens de erro detalhadas e espec\u00edficas</p>"},{"location":"desenvolvimento/#ferramentas-e-tecnologias","title":"Ferramentas e Tecnologias","text":""},{"location":"desenvolvimento/#flex-v264-analisador-lexico","title":"Flex v2.6.4 (Analisador L\u00e9xico)","text":"<p>Vantagens: - Gera\u00e7\u00e3o autom\u00e1tica de c\u00f3digo C - Reconhecimento eficiente de padr\u00f5es - Integra\u00e7\u00e3o f\u00e1cil com Bison</p> <p>Desafios: - Curva de aprendizado inicial - Debugging de regras complexas</p>"},{"location":"desenvolvimento/#bison-v382-analisador-sintatico","title":"Bison v3.8.2 (Analisador Sint\u00e1tico)","text":"<p>Vantagens: - Suporte a gram\u00e1ticas complexas - Preced\u00eancia de operadores autom\u00e1tica - Gera\u00e7\u00e3o de c\u00f3digo otimizado</p> <p>Desafios: - Sintaxe espec\u00edfica para a\u00e7\u00f5es sem\u00e2nticas - Debugging de conflitos de gram\u00e1tica</p>"},{"location":"desenvolvimento/#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":"<ul> <li>Tipos de dados: 4 (int, float, string, bool)</li> <li>Operadores: 15 (aritm\u00e9ticos, compara\u00e7\u00e3o, l\u00f3gicos)</li> <li>Estruturas de controle: 2 (if/else, while)</li> <li>Fun\u00e7\u00f5es built-in: 1 (print)</li> <li>Testes: 9 categorias principais</li> </ul>"},{"location":"desenvolvimento/#proximos-passos_1","title":"Pr\u00f3ximos Passos","text":""},{"location":"desenvolvimento/#melhorias-de-desenvolvimento","title":"Melhorias de Desenvolvimento","text":"<ol> <li>CI/CD: Integra\u00e7\u00e3o cont\u00ednua</li> <li>Cobertura de Testes: Aumentar cobertura</li> <li>Documenta\u00e7\u00e3o: Documenta\u00e7\u00e3o da API</li> <li>Benchmarks: Testes de performance</li> </ol>"},{"location":"desenvolvimento/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/06/2025 Cria\u00e7\u00e3o do documento Arthur Evangelista <p>Este documento reflete o processo de desenvolvimento real e as decis\u00f5es tomadas durante a implementa\u00e7\u00e3o do interpretador Python. </p>"},{"location":"escopo/","title":"Escopo do Projeto","text":""},{"location":"escopo/#objetivo","title":"Objetivo","text":"<p>Desenvolver um interpretador simplificado para um subconjunto da linguagem Python, utilizando Flex para an\u00e1lise l\u00e9xica e Bison para an\u00e1lise sint\u00e1tica. O interpretador \u00e9 capaz de executar opera\u00e7\u00f5es b\u00e1sicas como atribui\u00e7\u00f5es de vari\u00e1veis, express\u00f5es aritm\u00e9ticas, controle de fluxo com estruturas condicionais e loops.</p>"},{"location":"escopo/#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":""},{"location":"escopo/#tipos-de-dados","title":"Tipos de Dados","text":"<ul> <li>Inteiros: <code>42</code>, <code>-10</code>, <code>+5</code></li> <li>Ponto flutuante: <code>3.14</code>, <code>-2.5</code>, <code>1e-10</code></li> <li>Strings: <code>\"Hello\"</code>, <code>'World'</code></li> <li>Booleanos: <code>True</code>, <code>False</code></li> </ul>"},{"location":"escopo/#operadores","title":"Operadores","text":"<ul> <li>Aritm\u00e9ticos: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code></li> <li>Compara\u00e7\u00e3o: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>L\u00f3gicos: <code>and</code>, <code>or</code>, <code>not</code></li> </ul>"},{"location":"escopo/#estruturas-de-controle","title":"Estruturas de Controle","text":"<ul> <li>Condicionais: <code>if</code>/<code>else</code> com blocos aninhados</li> <li>Loops: <code>while</code> com suporte a <code>break</code> e <code>continue</code></li> <li>Blocos: Indenta\u00e7\u00e3o Python completa</li> </ul>"},{"location":"escopo/#funcoes-built-in","title":"Fun\u00e7\u00f5es Built-in","text":"<ul> <li><code>print()</code>: Sa\u00edda formatada com m\u00faltiplos argumentos</li> </ul>"},{"location":"escopo/#tratamento-de-erros","title":"Tratamento de Erros","text":"<ul> <li>Erros l\u00e9xicos: Caracteres inv\u00e1lidos</li> <li>Erros sint\u00e1ticos: Estrutura gramatical incorreta</li> <li>Erros sem\u00e2nticos: Vari\u00e1veis n\u00e3o definidas, divis\u00e3o por zero</li> <li>Erros de indenta\u00e7\u00e3o: Inconsist\u00eancia na indenta\u00e7\u00e3o</li> </ul>"},{"location":"escopo/#limitacoes-do-escopo-atual","title":"Limita\u00e7\u00f5es do Escopo Atual","text":""},{"location":"escopo/#nao-implementado","title":"N\u00e3o Implementado","text":"<ul> <li>Fun\u00e7\u00f5es definidas pelo usu\u00e1rio: Apenas fun\u00e7\u00f5es built-in</li> <li>Estruturas de dados complexas: Listas, dicion\u00e1rios, tuplas</li> <li>Classes e objetos: Programa\u00e7\u00e3o orientada a objetos</li> <li>M\u00f3dulos: Sistema de importa\u00e7\u00e3o</li> <li>Exce\u00e7\u00f5es: Try/catch</li> <li>Operadores de bit: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li> <li>Operadores de atribui\u00e7\u00e3o composta: <code>+=</code>, <code>-=</code>, etc.</li> <li>Loop <code>for</code>: Apenas <code>while</code> implementado</li> <li><code>elif</code>: Apenas <code>if</code>/<code>else</code> b\u00e1sico</li> </ul>"},{"location":"escopo/#implementado","title":"Implementado","text":"<ul> <li>Opera\u00e7\u00f5es aritm\u00e9ticas b\u00e1sicas: Todas as opera\u00e7\u00f5es fundamentais</li> <li>Controle de fluxo: <code>if</code>/<code>else</code> e <code>while</code></li> <li>Vari\u00e1veis: Declara\u00e7\u00e3o e atribui\u00e7\u00e3o</li> <li>Tipos b\u00e1sicos: Int, float, string, bool</li> <li>Indenta\u00e7\u00e3o: Suporte completo</li> <li>Coment\u00e1rios: Linhas com <code>#</code></li> <li>Tratamento de erros: Mensagens detalhadas</li> <li>Suite de testes: Cobertura completa</li> </ul>"},{"location":"escopo/#arquivos-principais","title":"Arquivos Principais","text":""},{"location":"escopo/#codigo-fonte","title":"C\u00f3digo Fonte","text":"<ul> <li><code>main.c</code>: Ponto de entrada</li> <li><code>lexer/lexer.l</code>: Especifica\u00e7\u00e3o do lexer</li> <li><code>parser/parser.y</code>: Gram\u00e1tica do parser</li> <li><code>parser/ast.h/.c</code>: Implementa\u00e7\u00e3o da AST</li> <li><code>parser/tabela.h/.c</code>: Tabela de s\u00edmbolos</li> <li><code>parser/interpretador.h/.c</code>: Interpretador</li> <li><code>parser/types.h</code>: Defini\u00e7\u00f5es de tipos</li> </ul>"},{"location":"escopo/#scripts-e-configuracao","title":"Scripts e Configura\u00e7\u00e3o","text":"<ul> <li><code>Makefile</code>: Sistema de build</li> <li><code>indent_preproc.py</code>: Pr\u00e9-processador</li> <li><code>run_tests.sh</code>: Suite de testes</li> <li><code>scripts/</code>: Scripts de automa\u00e7\u00e3o</li> </ul>"},{"location":"escopo/#testes","title":"Testes","text":"<ul> <li><code>tests/test_*.py</code>: Testes de funcionalidade</li> <li><code>tests/test_*.c</code>: Testes unit\u00e1rios</li> <li><code>tests/test_erro_*.py</code>: Testes de erro</li> </ul>"},{"location":"escopo/#conclusao","title":"Conclus\u00e3o","text":"<p>Este projeto demonstra com sucesso a implementa\u00e7\u00e3o de um interpretador Python simplificado usando as ferramentas Flex e Bison. O escopo foi bem definido e implementado, cobrindo os conceitos fundamentais de compiladores: an\u00e1lise l\u00e9xica, an\u00e1lise sint\u00e1tica, constru\u00e7\u00e3o de AST e interpreta\u00e7\u00e3o.</p> <p>O projeto oferece uma base s\u00f3lida para futuras extens\u00f5es e serve como excelente material educacional para o estudo de compiladores e interpretadores.</p> <p></p>"},{"location":"escopo/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>0.1</code> 27/04/2025 Cria\u00e7\u00e3o do GitPages do grupo Jefferson <code>1.0</code> 27/04/2025 Cria\u00e7\u00e3o da p\u00e1gina \"Escopo\" contendo informa\u00e7\u00f5es sobre o escopo do projeto Let\u00edcia Resende <code>1.1</code> 28/04/2025 Ajustes e corre\u00e7\u00f5es em inconsist\u00eancias no documento Arthur Evangelista <code>1.2</code> 27/06/2025 Atualiza\u00e7\u00e3o completa do escopo para refletir o projeto implementado Arthur Evangelista"},{"location":"explicacao/","title":"Interpretador de Linguagem Python","text":""},{"location":"explicacao/#explicacao-do-projeto","title":"Explica\u00e7\u00e3o do Projeto","text":"<p>O projeto visa criar um interpretador simples da linguagem Python utilizando as ferramentas Flex e Bison. O objetivo principal \u00e9 analisar e interpretar um subconjunto da sintaxe de Python, sendo capaz de executar opera\u00e7\u00f5es como atribui\u00e7\u00f5es de vari\u00e1veis, express\u00f5es aritm\u00e9ticas, impress\u00e3o, e controle de fluxo b\u00e1sico (como estruturas condicionais).</p>"},{"location":"explicacao/#por-que-python","title":"Por que Python?","text":"<p>A escolha da linguagem Python como base para o interpretador foi estrat\u00e9gica por v\u00e1rios motivos:</p>"},{"location":"explicacao/#1-simplicidade-da-sintaxe","title":"1. Simplicidade da Sintaxe","text":"<p>Python possui uma sintaxe clara e leg\u00edvel, com poucos s\u00edmbolos especiais. Isso facilita significativamente a implementa\u00e7\u00e3o do parser, pois reduz a complexidade das regras gramaticais.</p>"},{"location":"explicacao/#2-indentacao-significativa","title":"2. Indenta\u00e7\u00e3o Significativa","text":"<p>Se por um lado a sua sintaxe clara facilita, por outro ela dificulta. O uso de indenta\u00e7\u00e3o para definir blocos de c\u00f3digo oferece um desafio interessante e educacional para o tratamento l\u00e9xico. Diferente de outras linguagens que usam chaves <code>{}</code>, Python requer um pr\u00e9-processamento especial para converter espa\u00e7os em tokens de controle de bloco.</p>"},{"location":"explicacao/#3-popularidade-academica","title":"3. Popularidade Acad\u00eamica","text":"<p>Python \u00e9 amplamente usado em ambientes educacionais e cient\u00edficos, tornando o projeto mais relevante e familiar para estudantes. A compreens\u00e3o de como Python funciona internamente \u00e9 valiosa.</p>"},{"location":"explicacao/#4-familiaridade-do-grupo-com-a-linguagem","title":"4. Familiaridade do grupo com a linguagem","text":"<p>Logo nas primeiras aulas nos reunimos para decidir a linguagem do projeto. Por afinidade da maioria, Python foi a linguagem priorizada. </p>"},{"location":"explicacao/#por-que-usar-flex-e-bison","title":"Por que usar Flex e Bison?","text":"<ul> <li>Flex \u00e9 uma ferramenta para gerar analisadores l\u00e9xicos, ou seja, programas que s\u00e3o respons\u00e1veis por dividir o c\u00f3digo em tokens, como palavras-chave, identificadores, operadores e literais. Isso \u00e9 essencial para entender a estrutura b\u00e1sica do c\u00f3digo.</li> <li>Bison \u00e9 utilizado para gerar o analisador sint\u00e1tico, que interpreta a organiza\u00e7\u00e3o dos tokens gerados pelo Flex e valida a sintaxe do c\u00f3digo. O Bison cria uma \u00e1rvore de sintaxe abstrata (AST), que descreve a estrutura do c\u00f3digo de maneira hier\u00e1rquica.</li> </ul>"},{"location":"explicacao/#como-funciona-o-interpretador","title":"Como Funciona o Interpretador?","text":"<ol> <li>An\u00e1lise L\u00e9xica (Flex): </li> <li> <p><p> O Flex ir\u00e1 percorrer o c\u00f3digo de entrada, identificando tokens (como palavras-chave, operadores e vari\u00e1veis) e os classificando conforme a gram\u00e1tica definida.</p></p> </li> <li> <p>An\u00e1lise Sint\u00e1tica (Bison):</p> </li> <li> <p><p>O Bison utilizar\u00e1 os tokens identificados pelo Flex para construir a \u00e1rvore de sintaxe abstrata (AST), que representa a estrutura do c\u00f3digo. Isso permite ao interpretador entender a rela\u00e7\u00e3o entre os elementos do c\u00f3digo (por exemplo, quais operadores se aplicam a quais operandos).</p></p> </li> <li> <p>Execu\u00e7\u00e3o do C\u00f3digo:</p> </li> <li><p> Ap\u00f3s a constru\u00e7\u00e3o da AST, o interpretador processar\u00e1 essa estrutura e executar\u00e1 as instru\u00e7\u00f5es correspondentes, como calcular express\u00f5es aritm\u00e9ticas ou controlar o fluxo de execu\u00e7\u00e3o com estruturas condicionais.</p></li> </ol>"},{"location":"explicacao/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/04/2025 Cria\u00e7\u00e3o do GitPages do grupo Jefferson <code>1.1</code> 27/04/2025 Cria\u00e7\u00e3o da p\u00e1gina \"Explica\u00e7\u00e3o do projeto\" contendo informa\u00e7\u00f5es sobre o projeto Let\u00edcia Resende <code>1.2</code> 28/04/2025 Pequenos ajustes no documento Arthur Evangelista <code>1.3</code> 27/06/2025 Adi\u00e7\u00e3o da aba \"Por que python?\" Arthur Evangelista"},{"location":"instalacao/","title":"\ud83d\udee0\ufe0f Guia de Instala\u00e7\u00e3o","text":"<p>Este guia ir\u00e1 ajud\u00e1-lo a configurar o ambiente de desenvolvimento necess\u00e1rio para compilar e executar o interpretador Python.</p>"},{"location":"instalacao/#pre-requisitos","title":"\ud83d\udccb Pr\u00e9-requisitos","text":""},{"location":"instalacao/#sistema-operacional","title":"Sistema Operacional","text":"<ul> <li>Linux (Ubuntu/Debian recomendado)</li> <li>Windows (usando WSL ou MinGW)</li> <li>macOS (usando Homebrew)</li> </ul>"},{"location":"instalacao/#ferramentas-necessarias","title":"Ferramentas Necess\u00e1rias","text":""},{"location":"instalacao/#1-compilador-c-gcc","title":"1. Compilador C (GCC)","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install build-essential\n\n# CentOS/RHEL/Fedora\nsudo yum groupinstall \"Development Tools\"\n# ou\nsudo dnf groupinstall \"Development Tools\"\n\n# macOS\nxcode-select --install\n</code></pre>"},{"location":"instalacao/#2-flex-v264-analisador-lexico","title":"2. Flex v2.6.4 (Analisador L\u00e9xico)","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt install flex\n\n# CentOS/RHEL/Fedora\nsudo yum install flex\n# ou\nsudo dnf install flex\n\n# macOS\nbrew install flex\n</code></pre>"},{"location":"instalacao/#3-bison-v382-analisador-sintatico","title":"3. Bison v3.8.2 (Analisador Sint\u00e1tico)","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt install bison\n\n# CentOS/RHEL/Fedora\nsudo yum install bison\n# ou\nsudo dnf install bison\n\n# macOS\nbrew install bison\n</code></pre>"},{"location":"instalacao/#4-python-3","title":"4. Python 3","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt install python3 python3-pip\n\n# CentOS/RHEL/Fedora\nsudo yum install python3 python3-pip\n# ou\nsudo dnf install python3 python3-pip\n\n# macOS\nbrew install python3\n</code></pre>"},{"location":"instalacao/#5-make","title":"5. Make","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt install make\n\n# CentOS/RHEL/Fedora\nsudo yum install make\n# ou\nsudo dnf install make\n\n# macOS\n# J\u00e1 inclu\u00eddo com Xcode Command Line Tools\n</code></pre>"},{"location":"instalacao/#instalacao-rapida-ubuntudebian","title":"\ud83d\ude80 Instala\u00e7\u00e3o R\u00e1pida (Ubuntu/Debian)","text":"<p>Execute o seguinte comando para instalar todas as depend\u00eancias de uma vez:</p> Bash<pre><code>sudo apt update &amp;&amp; sudo apt install -y build-essential flex bison python3 python3-pip make\n</code></pre>"},{"location":"instalacao/#verificacao-da-instalacao","title":"\ud83d\udd27 Verifica\u00e7\u00e3o da Instala\u00e7\u00e3o","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o, verifique se todas as ferramentas est\u00e3o funcionando:</p> Bash<pre><code># Verificar vers\u00f5es\ngcc --version\nflex --version\nbison --version\npython3 --version\nmake --version\n</code></pre> <p>Voc\u00ea deve ver sa\u00eddas similares a: Text Only<pre><code>gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nflex 2.6.4\nbison (GNU Bison) 3.5.1\nPython 3.8.10\nGNU Make 4.2.1\n</code></pre></p>"},{"location":"instalacao/#instalacao-no-windows","title":"\ud83d\udce6 Instala\u00e7\u00e3o no Windows","text":""},{"location":"instalacao/#opcao-1-windows-subsystem-for-linux-wsl-recomendado","title":"Op\u00e7\u00e3o 1: Windows Subsystem for Linux (WSL) - Recomendado","text":"<ol> <li> <p>Instalar WSL2: PowerShell<pre><code>wsl --install\n</code></pre></p> </li> <li> <p>Reiniciar o computador</p> </li> <li> <p>Abrir terminal Ubuntu e seguir os passos do Linux</p> </li> </ol>"},{"location":"instalacao/#opcao-2-mingw-msys2","title":"Op\u00e7\u00e3o 2: MinGW + MSYS2","text":"<ol> <li> <p>Baixar e instalar MSYS2 de https://www.msys2.org/</p> </li> <li> <p>Abrir MSYS2 terminal e instalar as ferramentas: Bash<pre><code>pacman -S mingw-w64-x86_64-gcc\npacman -S mingw-w64-x86_64-flex\npacman -S mingw-w64-x86_64-bison\npacman -S mingw-w64-x86_64-make\npacman -S mingw-w64-x86_64-python\n</code></pre></p> </li> <li> <p>Adicionar MinGW ao PATH do Windows</p> </li> </ol>"},{"location":"instalacao/#instalacao-no-macos","title":"\ud83c\udf4e Instala\u00e7\u00e3o no macOS","text":""},{"location":"instalacao/#usando-homebrew-recomendado","title":"Usando Homebrew (Recomendado)","text":"<ol> <li> <p>Instalar Homebrew (se n\u00e3o tiver): Bash<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></p> </li> <li> <p>Instalar as ferramentas: Bash<pre><code>brew install gcc flex bison python3 make\n</code></pre></p> </li> </ol>"},{"location":"instalacao/#usando-macports","title":"Usando MacPorts","text":"Bash<pre><code>sudo port install gcc flex bison python3 make\n</code></pre>"},{"location":"instalacao/#solucao-de-problemas","title":"\ud83d\udd0d Solu\u00e7\u00e3o de Problemas","text":""},{"location":"instalacao/#erro-flex-command-not-found","title":"Erro: \"flex: command not found\"","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt install flex\n\n# Verificar se est\u00e1 no PATH\nwhich flex\n</code></pre>"},{"location":"instalacao/#erro-bison-command-not-found","title":"Erro: \"bison: command not found\"","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt install bison\n\n# Verificar se est\u00e1 no PATH\nwhich bison\n</code></pre>"},{"location":"instalacao/#erro-make-command-not-found","title":"Erro: \"make: command not found\"","text":"Bash<pre><code># Ubuntu/Debian\nsudo apt install make\n\n# Verificar se est\u00e1 no PATH\nwhich make\n</code></pre>"},{"location":"instalacao/#erro-de-permissao-no-windows","title":"Erro de permiss\u00e3o no Windows","text":"<ul> <li>Execute o terminal como administrador</li> <li>Verifique se o antiv\u00edrus n\u00e3o est\u00e1 bloqueando as ferramentas</li> </ul>"},{"location":"instalacao/#problemas-com-versoes-do-gcc","title":"Problemas com vers\u00f5es do GCC","text":"Bash<pre><code># Verificar vers\u00e3o atual\ngcc --version\n\n# Se necess\u00e1rio, instalar vers\u00e3o espec\u00edfica\nsudo apt install gcc-9\n</code></pre>"},{"location":"instalacao/#teste-da-instalacao","title":"\u2705 Teste da Instala\u00e7\u00e3o","text":"<p>Ap\u00f3s a instala\u00e7\u00e3o, teste se tudo est\u00e1 funcionando:</p>"},{"location":"instalacao/#bash1-2-3-4-5-6-7-8-9-clonar-ou-baixar-o-projeto-cd-caminhoparatrab_compiladores-tentar-compilar-make-clean-make-se-compilar-com-sucesso-testar-execucao-make-run","title":"Bash<pre><code># Clonar ou baixar o projeto\ncd /caminho/para/Trab_Compiladores\n\n# Tentar compilar\nmake clean\nmake\n\n# Se compilar com sucesso, testar execu\u00e7\u00e3o\nmake run\n</code></pre>","text":""},{"location":"instalacao/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/06/2025 Cria\u00e7\u00e3o do documento Arthur Evangelista <p>Se encontrar algum problema durante a instala\u00e7\u00e3o, consulte a se\u00e7\u00e3o de solu\u00e7\u00e3o de problemas ou abra uma issue no reposit\u00f3rio. </p>"},{"location":"metodologia/","title":"Metodologia","text":""},{"location":"metodologia/#introducao","title":"Introdu\u00e7\u00e3o","text":"<p>Neste documento, ser\u00e1 apresentada a metodologia adotada para o desenvolvimento do Interpretador da linguagem python, com o objetivo de descrever as etapas e os processos seguidos para alcan\u00e7ar os resultados desejados. A metodologia define a abordagem sistem\u00e1tica e estruturada adotada para resolver o problema proposto.</p>"},{"location":"metodologia/#abordagem-metodologica","title":"Abordagem Metodol\u00f3gica","text":"<p> \u2003\u2003A metodologia utilizada no desenvolvimento do projeto foi baseada em pr\u00e1ticas \u00e1geis como o Scrum e adaptada para a rotina dos membros do grupo, visando uma flexibilidade de hor\u00e1rios adequada ao desenvolvimento do projeto enquanto se mant\u00e9m um controle rigoroso sobre os processos cr\u00edticos.</p> <p>O processo de trabalho foi dividido nas seguintes etapas:</p>"},{"location":"metodologia/#planejamento","title":"Planejamento","text":"<p> \u2003\u2003O planejamento inicial foi essencial para definir os objetivos do projeto, os recursos necess\u00e1rios e as expectativas de todas as partes envolvidas. Durante esta fase, foram realizadas as seguintes atividades:</p> <ul> <li>Levantamento dos requisitos do projeto: Defini\u00e7\u00e3o das funcionalidades do interpretador, como an\u00e1lise l\u00e9xica, sint\u00e1tica e execu\u00e7\u00e3o de c\u00f3digo Python.</li> <li>An\u00e1lise de viabilidade t\u00e9cnica: Avalia\u00e7\u00e3o da utiliza\u00e7\u00e3o de ferramentas como Flex e Bison para an\u00e1lise l\u00e9xica e sint\u00e1tica, e da viabilidade de implementa\u00e7\u00e3o do interpretador em C.</li> <li>Defini\u00e7\u00e3o de cronograma e aloca\u00e7\u00e3o de recursos: Planejamento do tempo e das ferramentas necess\u00e1rias, al\u00e9m da distribui\u00e7\u00e3o de tarefas entre os membros da equipe.</li> </ul>"},{"location":"metodologia/#desenvolvimento","title":"Desenvolvimento","text":"<p>A fase de desenvolvimento foi dividida em ciclos iterativos, com entregas incrementais, permitindo feedback cont\u00ednuo entre os membros do grupo e ajustes ao longo do processo.</p> <ul> <li>Desenvolvimento inicial: Cria\u00e7\u00e3o dos prot\u00f3tipos de c\u00f3digo do analisador l\u00e9xico (com Flex) e do analisador sint\u00e1tico (com Bison).</li> <li>Revis\u00f5es peri\u00f3dicas: An\u00e1lise do c\u00f3digo e ajustes com base em testes realizados ao longo do desenvolvimento.</li> <li>Implementa\u00e7\u00e3o final: Ainda n\u00e3o finalizado.</li> </ul>"},{"location":"metodologia/#3-ferramentas","title":"3. Ferramentas","text":"<p>O projeto utiliza uma s\u00e9rie de ferramentas e tecnologias para garantir a efici\u00eancia e qualidade do trabalho, incluindo:</p> <ul> <li>Tecnologias de desenvolvimento: C, Flex (para o analisador l\u00e9xico), Bison (para o analisador sint\u00e1tico).</li> <li>Sistemas de controle de vers\u00e3o: Git e Github para gerenciar o c\u00f3digo-fonte e as vers\u00f5es do projeto.</li> <li>Plataformas de colabora\u00e7\u00e3o: Whatsapp e Google meet para comunica\u00e7\u00e3o entre os membros da equipe.</li> <li>Editor de c\u00f3digo: Visual Studio Code para desenvolvimento e depura\u00e7\u00e3o.</li> </ul>"},{"location":"metodologia/#4-conclusao","title":"4. Conclus\u00e3o","text":"<p> \u2003\u2003A metodologia adotada tem sido essencial para o progresso do projeto, permitindo que os objetivos sejam alcan\u00e7ados de forma incremental. Apesar de ainda estarmos na fase de desenvolvimento, os resultados obtidos at\u00e9 agora indicam que estamos no caminho certo para cumprir os objetivos dentro do prazo estabelecido.</p>"},{"location":"metodologia/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/04/2025 Cria\u00e7\u00e3o do GitPages do grupo Jefferson <code>1.1</code> 27/04/2025 Cria\u00e7\u00e3o da p\u00e1gina \"Metodologia\" contendo informa\u00e7\u00f5es sobre a metodologia utilizada Carolina <code>1.2</code> 28/04/2025 Atualiza\u00e7\u00e3o de informa\u00e7\u00f5es no documento Arthur Evangelista"},{"location":"projeto/","title":"Documenta\u00e7\u00e3o do Projeto","text":"<p>Esta se\u00e7\u00e3o cont\u00e9m a documenta\u00e7\u00e3o t\u00e9cnica detalhada do interpretador Python, incluindo estrutura de arquivos e componentes do sistema.</p>"},{"location":"projeto/#fluxo-geral","title":"Fluxo Geral","text":"<p>O interpretador Python segue um fluxo cl\u00e1ssico de compiladores com as seguintes fases:</p> Text Only<pre><code>C\u00d3DIGO PYTHON (entrada)\n           |\n           v\n    PR\u00c9-PROCESSADOR\n    (indent_preproc.py)\n    \u2022 Converte indenta\u00e7\u00e3o em tokens @INDENT@/@DEDENT@\n    \u2022 Remove coment\u00e1rios\n    \u2022 Normaliza quebras de linha\n           |\n           v\n    ANALISADOR L\u00c9XICO\n    (Flex/lexer.l)\n    \u2022 Identifica tokens (palavras-chave, operadores, etc.)\n    \u2022 Converte texto em sequ\u00eancia de tokens\n    \u2022 Detecta erros l\u00e9xicos\n           |\n           v\n    ANALISADOR SINT\u00c1TICO\n    (Bison/parser.y)\n    \u2022 Verifica estrutura gramatical\n    \u2022 Constr\u00f3i a \u00c1rvore Sint\u00e1tica Abstrata (AST)\n    \u2022 Detecta erros sint\u00e1ticos\n           |\n           v\n    \u00c1RVORE SINT\u00c1TICA ABSTRATA (AST)\n    \u2022 Representa\u00e7\u00e3o hier\u00e1rquica do c\u00f3digo\n    \u2022 Estrutura de dados em \u00e1rvore\n    \u2022 N\u00f3s para cada tipo de instru\u00e7\u00e3o\n           |\n           v\n    INTERPRETADOR\n    (interpretador.c)\n    \u2022 Percorre a AST recursivamente\n    \u2022 Executa instru\u00e7\u00f5es\n    \u2022 Gerencia tabela de s\u00edmbolos\n    \u2022 Trata erros de execu\u00e7\u00e3o\n           |\n           v\n    RESULTADO (sa\u00edda)\n</code></pre>"},{"location":"projeto/#estrutura-detalhada-do-projeto","title":"Estrutura Detalhada do Projeto","text":""},{"location":"projeto/#arquivos-principais","title":"Arquivos Principais","text":""},{"location":"projeto/#mainc","title":"main.c","text":"<p>Fun\u00e7\u00e3o: Ponto de entrada do programa</p> <p>Responsabilidades: - Inicializa\u00e7\u00e3o do sistema - Abertura e valida\u00e7\u00e3o do arquivo de entrada - Chamada do parser (yyparse) - Execu\u00e7\u00e3o do interpretador - Tratamento de erros de alto n\u00edvel</p> <p>Fluxo principal: C<pre><code>1. Validar argumentos de linha de comando\n2. Abrir arquivo Python de entrada\n3. Configurar entrada para o lexer (yyin)\n4. Executar an\u00e1lise sint\u00e1tica (yyparse)\n5. Verificar se AST foi criada com sucesso\n6. Executar interpretador na AST\n7. Limpar recursos e finalizar\n</code></pre></p>"},{"location":"projeto/#makefile","title":"Makefile","text":"<p>Fun\u00e7\u00e3o: Sistema de build automatizado</p> <p>Responsabilidades: - Compila\u00e7\u00e3o do projeto - Gera\u00e7\u00e3o de arquivos Flex/Bison - Execu\u00e7\u00e3o de testes - Limpeza de arquivos tempor\u00e1rios</p> <p>Alvos principais: - <code>make</code> - Compila o projeto - <code>make clean</code> - Remove arquivos compilados - <code>make run</code> - Compila e executa - <code>make test</code> - Executa suite de testes - <code>make test-complete</code> - Executa todos os testes</p>"},{"location":"projeto/#indent_preprocpy","title":"indent_preproc.py","text":"<p>Fun\u00e7\u00e3o: Pr\u00e9-processador de indenta\u00e7\u00e3o Python</p> <p>Responsabilidades: - Converter espa\u00e7os/tabs em tokens <code>@INDENT@</code> e <code>@DEDENT@</code> - Remover coment\u00e1rios (linhas come\u00e7ando com <code>#</code>) - Normalizar quebras de linha - Detectar erros de indenta\u00e7\u00e3o inconsistente</p> <p>Algoritmo: Python<pre><code>1. Ler arquivo linha por linha\n2. Calcular n\u00edvel de indenta\u00e7\u00e3o atual\n3. Comparar com n\u00edvel anterior\n4. Gerar tokens @INDENT@ ou @DEDENT@ conforme necess\u00e1rio\n5. Remover coment\u00e1rios e espa\u00e7os em branco\n6. Validar consist\u00eancia da indenta\u00e7\u00e3o\n</code></pre></p>"},{"location":"projeto/#pasta-lexer","title":"Pasta lexer/","text":""},{"location":"projeto/#lexerl","title":"lexer.l","text":"<p>Fun\u00e7\u00e3o: Especifica\u00e7\u00e3o do analisador l\u00e9xico (Flex)</p> <p>Responsabilidades: - Reconhecimento de tokens Python - Convers\u00e3o de texto em sequ\u00eancia de tokens - Detec\u00e7\u00e3o de erros l\u00e9xicos</p> <p>Tokens reconhecidos: - Palavras-chave: <code>if</code>, <code>else</code>, <code>while</code>, <code>break</code>, <code>continue</code>, <code>and</code>, <code>or</code>, <code>not</code>, <code>True</code>, <code>False</code>, <code>print</code>, <code>input</code> - Operadores: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code>, <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>=</code> - Literais: Inteiros, floats, strings, booleanos - Identificadores: Nomes de vari\u00e1veis e fun\u00e7\u00f5es - Especiais: <code>@INDENT@</code>, <code>@DEDENT@</code>, <code>:</code>, <code>,</code>, <code>(</code>, <code>)</code>, <code>\\n</code></p>"},{"location":"projeto/#pasta-parser","title":"Pasta parser/","text":""},{"location":"projeto/#parsery","title":"parser.y","text":"<p>Fun\u00e7\u00e3o: Gram\u00e1tica do analisador sint\u00e1tico (Bison)</p> <p>Responsabilidades: - Defini\u00e7\u00e3o da gram\u00e1tica Python simplificada - Constru\u00e7\u00e3o da \u00c1rvore Sint\u00e1tica Abstrata (AST) - Detec\u00e7\u00e3o de erros sint\u00e1ticos - Gerenciamento de preced\u00eancia de operadores</p> <p>Regras gramaticais principais: Text Only<pre><code>programa: statement_list\nstatement: simple_stmt | compound_stmt\nsimple_stmt: atribuicao | chamada_funcao | BREAK | CONTINUE\ncompound_stmt: condicional | loop\nexpressao: termo | expressao ADD termo | expressao SUB termo\ntermo: fator | termo MUL fator | termo DIV fator\n</code></pre></p>"},{"location":"projeto/#asth-e-astc","title":"ast.h e ast.c","text":"<p>Fun\u00e7\u00e3o: Defini\u00e7\u00e3o e implementa\u00e7\u00e3o da \u00c1rvore Sint\u00e1tica Abstrata</p> <p>Responsabilidades: - Estrutura de dados para representar o c\u00f3digo - Fun\u00e7\u00f5es de cria\u00e7\u00e3o e destrui\u00e7\u00e3o de n\u00f3s - Diferentes tipos de n\u00f3s (opera\u00e7\u00f5es, valores, estruturas de controle)</p> <p>Tipos de n\u00f3s: C<pre><code>typedef enum {\n    NODO_OPERACAO,      // Opera\u00e7\u00f5es bin\u00e1rias (+, -, *, /, etc.)\n    NODO_VALOR,         // Valores literais (42, \"texto\", True)\n    NODO_IDENTIFICADOR, // Nomes de vari\u00e1veis\n    NODO_ATRIBUICAO,    // Atribui\u00e7\u00f5es (x = 10)\n    NODO_CHAMADA_FUNCAO,// Chamadas de fun\u00e7\u00e3o (print(x))\n    NODO_CONDICIONAL,   // Estruturas if/else\n    NODO_LOOP,          // Loops while\n    NODO_BLOCO,         // Blocos de c\u00f3digo\n    NODO_BREAK,         // Instru\u00e7\u00e3o break\n    NODO_CONTINUE       // Instru\u00e7\u00e3o continue\n} TipoNo;\n</code></pre></p>"},{"location":"projeto/#typesh","title":"types.h","text":"<p>Fun\u00e7\u00e3o: Defini\u00e7\u00f5es de tipos de dados do sistema</p> <p>Responsabilidades: - Tipos de dados suportados (int, float, string, bool) - Estruturas para resultados de express\u00f5es - Defini\u00e7\u00f5es de operadores</p> <p>Tipos principais: C<pre><code>typedef enum { \n    TIPO_INT, TIPO_FLOAT, TIPO_STRING, TIPO_BOOL, TIPO_NULO \n} TipoDado;\n\ntypedef enum {\n    ADICAO, SUBTRACAO, MULTIPLICACAO, DIVISAO, MODULO, POTENCIA,\n    IGUAL, DIFERENTE, MENOR, MENOR_IGUAL, MAIOR, MAIOR_IGUAL,\n    E_LOGICO, OU_LOGICO, NAO_LOGICO\n} TipoOperador;\n</code></pre></p>"},{"location":"projeto/#tabelah-e-tabelac","title":"tabela.h e tabela.c","text":"<p>Fun\u00e7\u00e3o: Tabela de s\u00edmbolos para gerenciamento de vari\u00e1veis</p> <p>Responsabilidades: - Armazenamento de vari\u00e1veis e seus valores - Busca e inser\u00e7\u00e3o de s\u00edmbolos - Gerenciamento de escopo (simplificado)</p> <p>Estrutura: C<pre><code>typedef struct {\n    char *nome;\n    Resultado valor;\n} Simbolo;\n\ntypedef struct {\n    Simbolo *simbolos;\n    int tamanho;\n    int capacidade;\n} TabelaSimbolos;\n</code></pre></p>"},{"location":"projeto/#interpretadorh-e-interpretadorc","title":"interpretador.h e interpretador.c","text":"<p>Fun\u00e7\u00e3o: Motor de execu\u00e7\u00e3o do interpretador</p> <p>Responsabilidades: - Interpreta\u00e7\u00e3o da AST - Execu\u00e7\u00e3o de instru\u00e7\u00f5es - Gerenciamento da tabela de s\u00edmbolos - Tratamento de erros de execu\u00e7\u00e3o</p> <p>Fun\u00e7\u00f5es principais: C<pre><code>void interpretar(NoAst *no);                    // Fun\u00e7\u00e3o principal\nResultado interpretar_expressao(NoAst *no);     // Avalia express\u00f5es\nvoid interpretar_atribuicao(NoAst *no);         // Executa atribui\u00e7\u00f5es\nvoid interpretar_condicional(NoAst *no);        // Executa if/else\nvoid interpretar_loop(NoAst *no);               // Executa while\n</code></pre></p>"},{"location":"projeto/#pasta-tests","title":"Pasta tests/","text":"<p>Fun\u00e7\u00e3o: Suite completa de testes do sistema</p> <p>Organiza\u00e7\u00e3o: - <code>test_*.py</code> - Testes de funcionalidade (c\u00f3digo Python) - <code>test_*.c</code> - Testes unit\u00e1rios (componentes C) - <code>test_erro_*.py</code> - Testes de tratamento de erros</p> <p>Principais categorias: 1. Testes de Express\u00f5es - Opera\u00e7\u00f5es aritm\u00e9ticas e l\u00f3gicas 2. Testes de Estruturas - Condicionais, loops, fun\u00e7\u00f5es 3. Testes de Tipos - Inteiros, floats, strings, booleanos 4. Testes de Erro - Tratamento de exce\u00e7\u00f5es e erros 5. Testes Unit\u00e1rios - Componentes individuais</p>"},{"location":"projeto/#pasta-scripts","title":"Pasta scripts/","text":"<p>Fun\u00e7\u00e3o: Scripts de automa\u00e7\u00e3o e teste</p> <p>Scripts principais: - <code>run_tests.sh</code> - Suite completa de testes - <code>test_resultados.sh</code> - Verifica\u00e7\u00e3o de resultados - <code>test_erros.sh</code> - Testes de tratamento de erros - <code>quick_test.sh</code> - Teste r\u00e1pido</p>"},{"location":"projeto/#componentes-do-sistema","title":"Componentes do Sistema","text":""},{"location":"projeto/#1-pre-processador-indent_preprocpy","title":"1. Pr\u00e9-processador (indent_preproc.py)","text":"<p>O pr\u00e9-processador resolve um dos maiores desafios da linguagem Python: a indenta\u00e7\u00e3o. Ele converte a indenta\u00e7\u00e3o baseada em espa\u00e7os em tokens expl\u00edcitos que podem ser processados pelo lexer.</p> <p>Desafios resolvidos: - Detec\u00e7\u00e3o de n\u00edveis de indenta\u00e7\u00e3o - Valida\u00e7\u00e3o de consist\u00eancia - Gera\u00e7\u00e3o de tokens <code>@INDENT@</code> e <code>@DEDENT@</code></p>"},{"location":"projeto/#2-analisador-lexico-lexerl","title":"2. Analisador L\u00e9xico (lexer.l)","text":"<p>O lexer identifica e categoriza os elementos b\u00e1sicos da linguagem Python.</p> <p>Caracter\u00edsticas: - Reconhecimento de todos os tokens Python b\u00e1sicos - Tratamento de strings com aspas simples e duplas - Suporte a n\u00fameros inteiros, floats e nota\u00e7\u00e3o cient\u00edfica - Detec\u00e7\u00e3o de palavras-chave e identificadores</p>"},{"location":"projeto/#3-analisador-sintatico-parsery","title":"3. Analisador Sint\u00e1tico (parser.y)","text":"<p>O parser verifica a estrutura gramatical e constr\u00f3i a AST.</p> <p>Funcionalidades: - Gram\u00e1tica Python simplificada mas completa - Preced\u00eancia de operadores correta - Constru\u00e7\u00e3o hier\u00e1rquica da AST - Detec\u00e7\u00e3o de erros sint\u00e1ticos</p>"},{"location":"projeto/#4-arvore-sintatica-abstrata-ast","title":"4. \u00c1rvore Sint\u00e1tica Abstrata (AST)","text":"<p>A AST \u00e9 a representa\u00e7\u00e3o intermedi\u00e1ria do c\u00f3digo fonte.</p> <p>Vantagens: - Estrutura hier\u00e1rquica clara - F\u00e1cil navega\u00e7\u00e3o e interpreta\u00e7\u00e3o - Separa\u00e7\u00e3o entre an\u00e1lise e execu\u00e7\u00e3o - Base para otimiza\u00e7\u00f5es futuras</p>"},{"location":"projeto/#5-interpretador-interpretadorc","title":"5. Interpretador (interpretador.c)","text":"<p>O interpretador executa o c\u00f3digo representado pela AST.</p> <p>Capacidades: - Execu\u00e7\u00e3o de express\u00f5es aritm\u00e9ticas e l\u00f3gicas - Controle de fluxo (if/else, while) - Gerenciamento de vari\u00e1veis - Fun\u00e7\u00f5es built-in (print)</p>"},{"location":"projeto/#6-tabela-de-simbolos-tabelac","title":"6. Tabela de S\u00edmbolos (tabela.c)","text":"<p>Gerencia o armazenamento e acesso a vari\u00e1veis.</p> <p>Funcionalidades: - Inser\u00e7\u00e3o e busca eficiente de s\u00edmbolos - Armazenamento de diferentes tipos de dados - Gerenciamento de mem\u00f3ria autom\u00e1tico</p>"},{"location":"projeto/#funcionalidades-implementadas","title":"Funcionalidades Implementadas","text":""},{"location":"projeto/#tipos-de-dados","title":"Tipos de Dados","text":"<ul> <li>Inteiros: Suporte completo a n\u00fameros inteiros positivos e negativos</li> <li>Ponto Flutuante: N\u00fameros decimais e nota\u00e7\u00e3o cient\u00edfica</li> <li>Strings: Texto entre aspas simples ou duplas</li> <li>Booleanos: Valores <code>True</code> e <code>False</code></li> </ul>"},{"location":"projeto/#operadores","title":"Operadores","text":"<ul> <li>Aritm\u00e9ticos: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code></li> <li>Compara\u00e7\u00e3o: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>L\u00f3gicos: <code>and</code>, <code>or</code>, <code>not</code></li> </ul>"},{"location":"projeto/#estruturas-de-controle","title":"Estruturas de Controle","text":"<ul> <li>Condicionais: <code>if</code>/<code>else</code> com suporte a blocos aninhados</li> <li>Loops: <code>while</code> com suporte a <code>break</code> e <code>continue</code></li> <li>Blocos: Indenta\u00e7\u00e3o Python completa</li> </ul>"},{"location":"projeto/#funcoes-built-in","title":"Fun\u00e7\u00f5es Built-in","text":"<ul> <li><code>print()</code>: Sa\u00edda formatada com m\u00faltiplos argumentos</li> </ul>"},{"location":"projeto/#tratamento-de-erros","title":"Tratamento de Erros","text":"<ul> <li>Erros l\u00e9xicos: Caracteres inv\u00e1lidos</li> <li>Erros sint\u00e1ticos: Estrutura gramatical incorreta</li> <li>Erros sem\u00e2nticos: Vari\u00e1veis n\u00e3o definidas, divis\u00e3o por zero</li> <li>Erros de indenta\u00e7\u00e3o: Inconsist\u00eancia na indenta\u00e7\u00e3o</li> </ul>"},{"location":"projeto/#fluxo-de-dados","title":"Fluxo de Dados","text":""},{"location":"projeto/#1-compilacao","title":"1. Compila\u00e7\u00e3o","text":"Bash<pre><code># Flex gera lexer.c\nflex -o build/lexer.c lexer/lexer.l\n\n# Bison gera parser.tab.c e parser.tab.h\nbison -d -t -o parser/parser.tab.c parser/parser.y\n\n# GCC compila todos os arquivos\ngcc -Iparser -Wall -Wextra -g *.c parser/*.c build/*.c -o interpretador -lfl -lm\n</code></pre>"},{"location":"projeto/#2-execucao","title":"2. Execu\u00e7\u00e3o","text":"Bash<pre><code># 1. Pr\u00e9-processamento\npython3 indent_preproc.py arquivo.py &gt; build/processed.py\n\n# 2. An\u00e1lise l\u00e9xica e sint\u00e1tica\n./interpretador build/processed.py\n\n# 3. Interpreta\u00e7\u00e3o\n# O interpretador percorre a AST e executa as instru\u00e7\u00f5es\n</code></pre>"},{"location":"projeto/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/06/2025 Cria\u00e7\u00e3o do documento Arthur Evangelista <p>Esta documenta\u00e7\u00e3o t\u00e9cnica fornece uma vis\u00e3o completa da arquitetura e implementa\u00e7\u00e3o do interpretador Python. </p>"},{"location":"testes/","title":"\ud83e\uddea Documenta\u00e7\u00e3o dos Testes","text":"<p>Esta se\u00e7\u00e3o descreve a suite completa de testes do interpretador Python, incluindo como execut\u00e1-los e entender seus resultados.</p>"},{"location":"testes/#visao-geral-dos-testes","title":"\ud83d\udccb Vis\u00e3o Geral dos Testes","text":"<p>O projeto inclui uma suite abrangente de testes que cobre:</p> <ul> <li>\u2705 Testes unit\u00e1rios: Componentes individuais (AST, tabela de s\u00edmbolos)</li> <li>\u2705 Testes de integra\u00e7\u00e3o: Funcionalidades completas</li> <li>\u2705 Testes de erro: Tratamento de exce\u00e7\u00f5es e erros</li> <li>\u2705 Testes de funcionalidade: Recursos espec\u00edficos do Python</li> <li>\u2705 Testes de casos extremos: Cen\u00e1rios limite</li> </ul>"},{"location":"testes/#execucao-dos-testes","title":"\ud83d\ude80 Execu\u00e7\u00e3o dos Testes","text":""},{"location":"testes/#comandos-principais","title":"Comandos Principais","text":"Bash<pre><code># Executar todos os testes\nmake test-complete\n\n# Executar testes espec\u00edficos\nmake test-expressoes\nmake test-condicionais\nmake test-loops\nmake test-erros\nmake test-tipos\nmake test-lexer\n...\n</code></pre>"},{"location":"testes/#atencao-para-usuarios-windowswsl","title":"\u26a0\ufe0f Aten\u00e7\u00e3o para Usu\u00e1rios Windows/WSL","text":"<p>Se voc\u00ea est\u00e1 utilizando o Windows com WSL (Windows Subsystem for Linux):</p> <ul> <li>Sempre execute os comandos de compila\u00e7\u00e3o e testes pelo terminal do WSL (Ubuntu, por exemplo), e n\u00e3o pelo CMD ou PowerShell do Windows.</li> <li>Antes de rodar os scripts <code>.sh</code>, converta os finais de linha dos arquivos para o formato Unix e d\u00ea permiss\u00e3o de execu\u00e7\u00e3o:</li> </ul> Bash<pre><code>cd Trab_Compiladores\ndos2unix scripts/*.sh\nchmod +x scripts/*.sh\n</code></pre> <ul> <li>Depois disso, rode normalmente os comandos: Bash<pre><code>make\nmake run\nmake test-resultados\n</code></pre></li> </ul> <p>Se n\u00e3o fizer isso, voc\u00ea pode receber erros como \u201ccannot execute: required file not found\u201d ou \u201cnot found\u201d.</p>"},{"location":"testes/#testes-individuais","title":"Testes Individuais","text":"Bash<pre><code># Testes de componentes\nmake test-tabela\nmake test-ast\nmake test-integrado\nmake test-lexer\n\n# Testes de funcionalidade\nmake test-expressoes\nmake test-condicionais\nmake test-loops\nmake test-tipos\nmake test-comparacoes\nmake test-casos-extremos\nmake test-funcoes-builtin\nmake test-operadores-logicos\nmake test-precedencia-operadores\n\n# Testes de erro\nmake test-erros\nmake test-resultados\n</code></pre>"},{"location":"testes/#estrutura-dos-testes","title":"\ud83d\udcc1 Estrutura dos Testes","text":""},{"location":"testes/#testes-unitarios-c","title":"Testes Unit\u00e1rios (C)","text":""},{"location":"testes/#test_astc-testes-da-arvore-sintatica-abstrata","title":"<code>test_ast.c</code> - Testes da \u00c1rvore Sint\u00e1tica Abstrata","text":"C<pre><code>// Testa cria\u00e7\u00e3o de n\u00f3s\nvoid test_criar_no_valor_int() {\n    NoAst *no = criar_no_valor_int(42, 1);\n    assert(no-&gt;tipo == NODO_VALOR);\n    assert(no-&gt;dados.literal.tipo == TIPO_INT);\n    assert(no-&gt;dados.literal.valor.int_val == 42);\n    destruir_ast(no);\n}\n\n// Testa opera\u00e7\u00f5es\nvoid test_criar_no_operacao() {\n    NoAst *esq = criar_no_valor_int(10, 1);\n    NoAst *dir = criar_no_valor_int(5, 1);\n    NoAst *op = criar_no_operacao(ADICAO, esq, dir, 1);\n\n    assert(op-&gt;tipo == NODO_OPERACAO);\n    assert(op-&gt;dados.operacao.operador == ADICAO);\n    destruir_ast(op);\n}\n</code></pre>"},{"location":"testes/#test_tabelac-testes-da-tabela-de-simbolos","title":"<code>test_tabela.c</code> - Testes da Tabela de S\u00edmbolos","text":"C<pre><code>// Testa inser\u00e7\u00e3o e busca\nvoid test_inserir_buscar_simbolo() {\n    TabelaSimbolos *tabela = criar_tabela_simbolos();\n\n    Resultado valor;\n    valor.tipo = TIPO_INT;\n    valor.valor.int_val = 42;\n\n    inserir_simbolo(tabela, \"x\", valor);\n\n    Resultado *encontrado = buscar_simbolo(tabela, \"x\");\n    assert(encontrado != NULL);\n    assert(encontrado-&gt;tipo == TIPO_INT);\n    assert(encontrado-&gt;valor.int_val == 42);\n\n    destruir_tabela_simbolos(tabela);\n}\n</code></pre>"},{"location":"testes/#test_lexerc-testes-do-analisador-lexico","title":"<code>test_lexer.c</code> - Testes do Analisador L\u00e9xico","text":"C<pre><code>// Testa reconhecimento de tokens\nvoid test_tokens_basicos() {\n    FILE *file = fopen(\"test1.txt\", \"r\");\n    yyin = file;\n\n    int token = yylex();\n    assert(token == ID); // Primeiro token deve ser um identificador\n\n    token = yylex();\n    assert(token == ASSIGN); // Segundo token deve ser atribui\u00e7\u00e3o\n\n    fclose(file);\n}\n</code></pre>"},{"location":"testes/#testes-de-funcionalidade-python","title":"Testes de Funcionalidade (Python)","text":""},{"location":"testes/#test_expressoespy-testes-de-expressoes","title":"<code>test_expressoes.py</code> - Testes de Express\u00f5es","text":"Python<pre><code># Testa opera\u00e7\u00f5es aritm\u00e9ticas b\u00e1sicas\nx = 10\ny = 5\nprint(\"Soma:\", x + y)\nprint(\"Subtra\u00e7\u00e3o:\", x - y)\nprint(\"Multiplica\u00e7\u00e3o:\", x * y)\nprint(\"Divis\u00e3o:\", x / y)\nprint(\"M\u00f3dulo:\", x % y)\nprint(\"Pot\u00eancia:\", x ** y)\n</code></pre>"},{"location":"testes/#test_condicionaispy-testes-de-estruturas-condicionais","title":"<code>test_condicionais.py</code> - Testes de Estruturas Condicionais","text":"Python<pre><code># Testa if/else b\u00e1sico\nx = 10\nif x &gt; 5:\n    print(\"x \u00e9 maior que 5\")\nelse:\n    print(\"x \u00e9 menor ou igual a 5\")\n\n# Testa condicionais aninhadas\nif x &gt; 15:\n    print(\"x \u00e9 muito grande\")\nelif x &gt; 10:\n    print(\"x \u00e9 grande\")\nelif x &gt; 5:\n    print(\"x \u00e9 m\u00e9dio\")\nelse:\n    print(\"x \u00e9 pequeno\")\n</code></pre>"},{"location":"testes/#test_loopspy-testes-de-loops","title":"<code>test_loops.py</code> - Testes de Loops","text":"Python<pre><code># Testa loop while b\u00e1sico\ncontador = 0\nwhile contador &lt; 5:\n    print(\"Contador:\", contador)\n    contador = contador + 1\n\n# Testa break\ni = 0\nwhile True:\n    if i &gt;= 10:\n        break\n    print(\"i =\", i)\n    i = i + 1\n\n# Testa continue\nj = 0\nwhile j &lt; 10:\n    j = j + 1\n    if j % 2 == 0:\n        continue\n    print(\"\u00cdmpar:\", j)\n</code></pre>"},{"location":"testes/#test_tipos_dadospy-testes-de-tipos-de-dados","title":"<code>test_tipos_dados.py</code> - Testes de Tipos de Dados","text":"Python<pre><code># Testa todos os tipos suportados\ninteiro = 42\nfloat_num = 3.14\nstring_texto = \"Hello, World!\"\nbooleano = True\n\nprint(\"Inteiro:\", inteiro)\nprint(\"Float:\", float_num)\nprint(\"String:\", string_texto)\nprint(\"Booleano:\", booleano)\n\n# Testa opera\u00e7\u00f5es entre tipos\nresultado = inteiro + float_num\nprint(\"Soma int + float:\", resultado)\n</code></pre>"},{"location":"testes/#testes-de-erro","title":"Testes de Erro","text":""},{"location":"testes/#test_erro_sintaxepy-testes-de-erro-sintatico","title":"<code>test_erro_sintaxe.py</code> - Testes de Erro Sint\u00e1tico","text":"Python<pre><code># C\u00f3digo com erro de sintaxe\nx = 10\ny =  # Erro: valor faltando\nprint(x)\n</code></pre>"},{"location":"testes/#test_erro_variavel_nao_definidapy-testes-de-variavel-nao-definida","title":"<code>test_erro_variavel_nao_definida.py</code> - Testes de Vari\u00e1vel N\u00e3o Definida","text":"Python<pre><code># Tenta usar vari\u00e1vel n\u00e3o definida\nprint(x)  # x n\u00e3o foi definida\n</code></pre>"},{"location":"testes/#test_erro_divisao_zeropy-testes-de-divisao-por-zero","title":"<code>test_erro_divisao_zero.py</code> - Testes de Divis\u00e3o por Zero","text":"Python<pre><code># Tenta dividir por zero\nresultado = 10 / 0\n</code></pre>"},{"location":"testes/#test_erro_indentacaopy-testes-de-erro-de-indentacao","title":"<code>test_erro_indentacao.py</code> - Testes de Erro de Indenta\u00e7\u00e3o","text":"Python<pre><code># C\u00f3digo com indenta\u00e7\u00e3o inconsistente\nif True:\n    print(\"Correto\")\n  print(\"Indenta\u00e7\u00e3o errada\")  # Erro de indenta\u00e7\u00e3o\n</code></pre>"},{"location":"testes/#scripts-de-automacao","title":"\ud83d\udd27 Scripts de Automa\u00e7\u00e3o","text":""},{"location":"testes/#scriptsrun_testssh-script-principal-de-testes","title":"<code>scripts/run_tests.sh</code> - Script Principal de Testes","text":"Bash<pre><code>#!/bin/bash\n# Executa todos os testes do projeto\n\necho \"\ud83e\uddea Executando suite completa de testes...\"\n\n# Testes unit\u00e1rios\necho \"\ud83d\udccb Testes unit\u00e1rios...\"\nmake test-tabela\nmake test-ast\nmake test-integrado\n\n# Testes de funcionalidade\necho \"\ud83d\udd27 Testes de funcionalidade...\"\nmake test-expressoes\nmake test-condicionais\nmake test-loops\nmake test-tipos\n\n# Testes de erro\necho \"\u26a0\ufe0f Testes de erro...\"\nmake test-erros\n\necho \"\u2705 Todos os testes conclu\u00eddos!\"\n</code></pre>"},{"location":"testes/#scriptstest_errossh-testes-de-tratamento-de-erros","title":"<code>scripts/test_erros.sh</code> - Testes de Tratamento de Erros","text":"Bash<pre><code>#!/bin/bash\n# Testa o tratamento de erros do interpretador\n\necho \"\u26a0\ufe0f Testando tratamento de erros...\"\n\n# Testa erro de sintaxe\necho \"Testando erro de sintaxe...\"\n./interpretador tests/test_erro_sintaxe.py 2&gt;&amp;1 | grep -q \"ERRO\"\n\n# Testa vari\u00e1vel n\u00e3o definida\necho \"Testando vari\u00e1vel n\u00e3o definida...\"\n./interpretador tests/test_erro_variavel_nao_definida.py 2&gt;&amp;1 | grep -q \"n\u00e3o definida\"\n\n# Testa divis\u00e3o por zero\necho \"Testando divis\u00e3o por zero...\"\n./interpretador tests/test_erro_divisao_zero.py 2&gt;&amp;1 | grep -q \"Divis\u00e3o por zero\"\n</code></pre>"},{"location":"testes/#scriptstest_resultadossh-testes-de-resultados","title":"<code>scripts/test_resultados.sh</code> - Testes de Resultados","text":"Bash<pre><code>#!/bin/bash\n# Testa se os resultados est\u00e3o corretos\n\necho \"\ud83d\udcca Testando resultados...\"\n\n# Testa opera\u00e7\u00f5es aritm\u00e9ticas\necho \"Testando opera\u00e7\u00f5es aritm\u00e9ticas...\"\nresultado=$(./interpretador tests/test_expressoes.py 2&gt;/dev/null | grep \"Soma:\" | cut -d' ' -f2)\nif [ \"$resultado\" = \"15\" ]; then\n    echo \"\u2705 Opera\u00e7\u00f5es aritm\u00e9ticas OK\"\nelse\n    echo \"\u274c Erro nas opera\u00e7\u00f5es aritm\u00e9ticas\"\nfi\n</code></pre>"},{"location":"testes/#interpretacao-dos-resultados","title":"\ud83d\udcca Interpreta\u00e7\u00e3o dos Resultados","text":""},{"location":"testes/#saida-de-testes-bem-sucedidos","title":"Sa\u00edda de Testes Bem-sucedidos","text":"Bash<pre><code>$ make test\n\ud83d\udccb Testes unit\u00e1rios...\n\u2705 Testes da tabela de s\u00edmbolos\n\u2705 Testes da AST\n\u2705 Testes de integra\u00e7\u00e3o\n\ud83d\udd27 Testes de funcionalidade...\n\u2705 test-expressoes\n\u2705 test-condicionais\n\u2705 test-loops\n\u2705 test-tipos\n\u26a0\ufe0f Testes de erro...\n\u2705 test-erros\n\u2705 Todos os testes foram executados!\n</code></pre>"},{"location":"testes/#saida-de-testes-com-falha","title":"Sa\u00edda de Testes com Falha","text":"Bash<pre><code>$ make test\n\ud83d\udccb Testes unit\u00e1rios...\n\u274c Testes da tabela de s\u00edmbolos\n\u2705 Testes da AST\n\u2705 Testes de integra\u00e7\u00e3o\n\ud83d\udd27 Testes de funcionalidade...\n\u274c test-expressoes\n\u2705 test-condicionais\n\u2705 test-loops\n\u2705 test-tipos\n\u26a0\ufe0f Testes de erro...\n\u2705 test-erros\n</code></pre>"},{"location":"testes/#debugging-de-testes","title":"\ud83d\udc1b Debugging de Testes","text":""},{"location":"testes/#usando-gdb-para-debugging","title":"Usando GDB para Debugging","text":"Bash<pre><code># Compilar com debug\nmake clean &amp;&amp; make\n\n# Executar teste espec\u00edfico com GDB\ngdb --args ./interpretador tests/test_expressoes.py\n\n# Dentro do GDB\n(gdb) run\n(gdb) bt  # Se houver crash\n(gdb) info locals  # Ver vari\u00e1veis locais\n</code></pre>"},{"location":"testes/#logs-detalhados","title":"Logs Detalhados","text":"Bash<pre><code># Executar com output detalhado\nmake test 2&gt;&amp;1 | tee test_log.txt\n\n# Ver apenas erros\nmake test 2&gt;&amp;1 | grep -i error\n\n# Ver apenas warnings\nmake test 2&gt;&amp;1 | grep -i warning\n</code></pre>"},{"location":"testes/#cobertura-de-testes","title":"\ud83d\udcc8 Cobertura de Testes","text":""},{"location":"testes/#funcionalidades-testadas","title":"Funcionalidades Testadas","text":"Funcionalidade Testes Status Opera\u00e7\u00f5es Aritm\u00e9ticas <code>test_expressoes.py</code> \u2705 Estruturas Condicionais <code>test_condicionais.py</code> \u2705 Loops <code>test_loops.py</code> \u2705 Tipos de Dados <code>test_tipos_dados.py</code> \u2705 Operadores L\u00f3gicos <code>test_operadores_logicos.py</code> \u2705 Preced\u00eancia de Operadores <code>test_precedencia_operadores.py</code> \u2705 Fun\u00e7\u00f5es Built-in <code>test_funcoes_builtin.py</code> \u2705 Tratamento de Erros <code>test_erro_*.py</code> \u2705 Casos Extremos <code>test_casos_extremos.py</code> \u2705"},{"location":"testes/#componentes-testados","title":"Componentes Testados","text":"Componente Teste Status AST <code>test_ast.c</code> \u2705 Tabela de S\u00edmbolos <code>test_tabela.c</code> \u2705 Lexer <code>test_lexer.c</code> \u2705 Parser <code>test_parser.c</code> \u2705 Interpretador Testes de integra\u00e7\u00e3o \u2705"},{"location":"testes/#mensagens-de-erro-testadas","title":"Mensagens de Erro Testadas","text":"Tipo de Erro Arquivo de Teste Mensagem Esperada Status Divis\u00e3o por Zero <code>test_erro_divisao_zero.py</code> <code>\"Divis\u00e3o por zero\"</code> \u2705 M\u00f3dulo por Zero <code>test_erro_modulo_zero.py</code> <code>\"M\u00f3dulo por zero\"</code> \u2705 Vari\u00e1vel N\u00e3o Definida <code>test_erro_variavel_nao_definida.py</code> <code>\"Vari\u00e1vel 'x' n\u00e3o definida\"</code> \u2705 Fun\u00e7\u00e3o N\u00e3o Definida <code>test_erro_funcao_nao_definida.py</code> <code>\"Fun\u00e7\u00e3o 'add' n\u00e3o definida\"</code> \u2705 Erro de Sintaxe <code>test_erro_sintaxe.py</code> <code>\"syntax error\"</code> \u2705 Erro de Indenta\u00e7\u00e3o <code>test_erro_indentacao.py</code> <code>\"Indenta\u00e7\u00e3o inconsistente na linha\"</code> \u2705 Caractere Inv\u00e1lido <code>test_erro_caractere_invalido.py</code> <code>\"Caractere inv\u00e1lido '@'\"</code> \u2705 Arquivo Inexistente <code>test_erro_arquivo_inexistente.py</code> <code>\"N\u00e3o foi poss\u00edvel abrir o arquivo\"</code> \u2705"},{"location":"testes/#adicionando-novos-testes","title":"\ud83d\udd04 Adicionando Novos Testes","text":""},{"location":"testes/#criando-teste-de-funcionalidade","title":"Criando Teste de Funcionalidade","text":"<ol> <li> <p>Criar arquivo Python em <code>tests/</code>: Python<pre><code># tests/test_nova_funcionalidade.py\n# Testa nova funcionalidade\nx = 10\ny = 20\nresultado = x + y\nprint(\"Resultado:\", resultado)\n</code></pre></p> </li> <li> <p>Adicionar ao Makefile: Makefile<pre><code>test-nova-funcionalidade: $(TARGET)\n    @if [ -f \"$(TESTS_DIR)/test_nova_funcionalidade.py\" ]; then \\\n        # ... l\u00f3gica do teste\n    fi\n</code></pre></p> </li> </ol>"},{"location":"testes/#criando-teste-unitario","title":"Criando Teste Unit\u00e1rio","text":"<ol> <li> <p>Criar arquivo C em <code>tests/</code>: C<pre><code>// tests/test_novo_componente.c\n#include &lt;assert.h&gt;\n#include \"../parser/novo_componente.h\"\n\nvoid test_nova_funcionalidade() {\n    // Teste da nova funcionalidade\n    assert(1 == 1); // Placeholder\n}\n\nint main() {\n    test_nova_funcionalidade();\n    return 0;\n}\n</code></pre></p> </li> <li> <p>Adicionar ao Makefile: Makefile<pre><code>test-novo-componente: $(BUILD_DIR)/test_novo_componente\n    @if ./$&lt; &gt; /dev/null 2&gt;&amp;1; then \\\n        echo \"\u2705 Testes do novo componente\"; \\\n    else \\\n        echo \"\u274c Testes do novo componente\"; \\\n    fi\n\n$(BUILD_DIR)/test_novo_componente: test_novo_componente.c $(BUILD_DIR)/novo_componente.o | $(BUILD_DIR)\n    $(CC) $(CFLAGS) $^ -o $@\n</code></pre></p> </li> </ol>"},{"location":"testes/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/06/2025 Cria\u00e7\u00e3o do documento Arthur Evangelista <p>Os testes garantem que o interpretador funcione corretamente e ajudam a detectar regress\u00f5es durante o desenvolvimento. </p>"},{"location":"uso/","title":"\ud83d\ude80 Guia de Uso","text":"<p>Este guia ir\u00e1 ensin\u00e1-lo como compilar, executar e usar o interpretador Python.</p>"},{"location":"uso/#compilacao","title":"\ud83d\udd28 Compila\u00e7\u00e3o","text":""},{"location":"uso/#compilacao-basica","title":"Compila\u00e7\u00e3o B\u00e1sica","text":"Bash<pre><code># Compilar o projeto\nmake\n\n# Ou compilar e executar em um comando\nmake run\n</code></pre>"},{"location":"uso/#comandos-de-compilacao-disponiveis","title":"Comandos de Compila\u00e7\u00e3o Dispon\u00edveis","text":"Bash<pre><code># Compilar apenas\nmake\n\n# Limpar arquivos compilados\nmake clean\n\n# Compilar e executar com arquivo espec\u00edfico\nmake run SCRIPT=meu_arquivo.py\n\n# Executar todos os testes\nmake test\n\n# Executar suite completa de testes\nmake test-complete\n</code></pre>"},{"location":"uso/#execucao","title":"\ud83c\udfaf Execu\u00e7\u00e3o","text":""},{"location":"uso/#execucao-basica","title":"Execu\u00e7\u00e3o B\u00e1sica","text":"Bash<pre><code># Executar com arquivo Python\n./interpretador arquivo.py\n\n# Usar o Makefile (recomendado)\nmake run SCRIPT=arquivo.py\n</code></pre>"},{"location":"uso/#exemplo-de-uso","title":"Exemplo de Uso","text":"<ol> <li> <p>Criar um arquivo Python (<code>teste.py</code>): Python<pre><code>x = 10\ny = 5\nprint(\"Soma:\", x + y)\n\nif x &gt; y:\n    print(\"x \u00e9 maior que y\")\nelse:\n    print(\"y \u00e9 maior que x\")\n</code></pre></p> </li> <li> <p>Executar o interpretador: Bash<pre><code>make run SCRIPT=teste.py\n</code></pre></p> </li> <li> <p>Sa\u00edda esperada: Text Only<pre><code>An\u00e1lise sint\u00e1tica conclu\u00edda com sucesso!\nAST criada com sucesso\n--- IN\u00cdCIO DA EXECU\u00c7\u00c3O ---\nSoma: 15\nx \u00e9 maior que y\n--- FIM DA EXECU\u00c7\u00c3O ---\nPrograma finalizado.\n</code></pre> O arquivo s\u00f3 funcionar\u00e1 corretamente se estiver dentro do escopo</p> </li> </ol>"},{"location":"uso/#debugging","title":"\ud83d\udc1b Debugging","text":""},{"location":"uso/#usando-gdb","title":"Usando GDB","text":"<p>O projeto inclui suporte para debugging com GDB:</p> Bash<pre><code># Compilar com informa\u00e7\u00f5es de debug\nmake clean &amp;&amp; make\n\n# Pr\u00e9-processar o arquivo\npython3 indent_preproc.py teste.py &gt; build/processed.py\n\n# Executar com GDB\ngdb --args ./interpretador build/processed.py\n\n# Dentro do GDB:\n(gdb) run\n# Se houver segmentation fault:\n(gdb) bt\n(gdb) quit\n</code></pre>"},{"location":"uso/#comandos-gdb-uteis","title":"Comandos GDB \u00dateis","text":"Bash<pre><code># Executar at\u00e9 encontrar erro\n(gdb) run\n\n# Ver backtrace (pilha de chamadas)\n(gdb) bt\n\n# Ver vari\u00e1veis locais\n(gdb) info locals\n\n# Definir breakpoint\n(gdb) break main.c:25\n\n# Continuar execu\u00e7\u00e3o\n(gdb) continue\n\n# Sair do GDB\n(gdb) quit\n</code></pre>"},{"location":"uso/#tratamento-de-erros","title":"\u26a0\ufe0f Tratamento de Erros","text":"<p>O interpretador fornece mensagens de erro detalhadas:</p>"},{"location":"uso/#erros-comuns","title":"Erros Comuns","text":"<ol> <li> <p>Erro de sintaxe: Python<pre><code>x = 10\ny =  # Erro: valor faltando\n</code></pre> Text Only<pre><code>[ERRO]: An\u00e1lise sint\u00e1tica falhou\n</code></pre></p> </li> <li> <p>Vari\u00e1vel n\u00e3o definida: Python<pre><code>print(x)  # x n\u00e3o foi definida\n</code></pre> Text Only<pre><code>[ERRO]: Vari\u00e1vel 'x' n\u00e3o definida\n</code></pre></p> </li> <li> <p>Divis\u00e3o por zero: Python<pre><code>resultado = 10 / 0\n</code></pre> Text Only<pre><code>[ERRO]: Divis\u00e3o por zero\n</code></pre></p> </li> <li> <p>Caractere inv\u00e1lido: Python<pre><code>x = @  # @ n\u00e3o \u00e9 v\u00e1lido\n</code></pre> Text Only<pre><code>[ERRO] (linha 1): Caractere inv\u00e1lido '@'\n</code></pre></p> </li> </ol>"},{"location":"uso/#configuracoes-avancadas","title":"\ud83d\udd27 Configura\u00e7\u00f5es Avan\u00e7adas","text":""},{"location":"uso/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"Bash<pre><code># Definir arquivo de teste padr\u00e3o\nexport SCRIPT=meu_teste.py\n\n# Executar com arquivo personalizado\nmake run\n</code></pre>"},{"location":"uso/#flags-de-compilacao","title":"Flags de Compila\u00e7\u00e3o","text":"<p>O Makefile suporta v\u00e1rias flags de compila\u00e7\u00e3o:</p> Bash<pre><code># Compilar com debug\nmake CFLAGS=\"-g -O0\"\n\n# Compilar com otimiza\u00e7\u00e3o\nmake CFLAGS=\"-O2\"\n\n# Compilar com warnings extras\nmake CFLAGS=\"-Wall -Wextra -Werror\"\n</code></pre>"},{"location":"uso/#proximos-passos","title":"\ud83d\udcda Pr\u00f3ximos Passos","text":"<p>Agora que voc\u00ea sabe como usar o interpretador:</p> <ol> <li>Execute os testes para verificar se tudo est\u00e1 funcionando</li> <li>Contribua para o desenvolvimento se quiser adicionar funcionalidades</li> </ol>"},{"location":"uso/#historico-de-versao","title":"Hist\u00f3rico de Vers\u00e3o","text":"Vers\u00e3o Data Descri\u00e7\u00e3o Autor(es) <code>1.0</code> 27/06/2025 Cria\u00e7\u00e3o do documento Arthur Evangelista <p>Para mais informa\u00e7\u00f5es sobre funcionalidades espec\u00edficas, consulte a documenta\u00e7\u00e3o da arquitetura. </p>"}]}